{"version":3,"sources":["webpack://veinif/webpack/bootstrap","webpack://veinif/webpack/runtime/global","webpack://veinif/webpack/runtime/publicPath","webpack://veinif/./src/game/playerInfo.ts","webpack://veinif/./src/core/player/pronouns.ts","webpack://veinif/./src/core/player/playerInfo.ts","webpack://veinif/./src/core/model/paragraph.ts","webpack://veinif/./src/core/model/Stat.ts","webpack://veinif/./src/game/allParagraphs.ts","webpack://veinif/./src/core/model/item.ts","webpack://veinif/./src/tools/formatting.ts","webpack://veinif/./src/core/inventory/inventory.ts","webpack://veinif/./src/core/player/statInfos.ts","webpack://veinif/./src/core/conditions/consequences.ts","webpack://veinif/./src/core/conditions/checkConditions.ts","webpack://veinif/./src/core/conditions/choiceCondition.ts","webpack://veinif/./src/core/model/save.ts","webpack://veinif/./src/core/script/saveScript.ts","webpack://veinif/./src/core/conditions/itemCondition.ts","webpack://veinif/./src/core/paragraphs/paragraphFunctions.ts","webpack://veinif/./src/core/paragraphs/showChoices.ts","webpack://veinif/./src/core/paragraphs/showItems.ts","webpack://veinif/./src/core/script/settings.ts","webpack://veinif/./src/core/script/index.ts"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","defaultPlayer","id","playerName","pronouns","Category","subjectPro","objectPro","possAdj","possessivePro","reflex","is","showPronounDialogue","pronounsContainer","getElementById","pronounsLength","i","pronounEntry","innerHTML","addEventListener","getPronouns","selectedPronoun","querySelector","value","found","find","element","showPronouns","setPronouns","console","log","pronounsClassed","querySelectorAll","forEach","getPlayer","setPlayer","newPlayer","getName","inputName","showNameDiv","container","statStyle","conStyle","singleParagraph","paragraph","statWithStyle","s","v","statName","style","super","getParagraph","player","name","content","choices","nextName","cat","consequence","stat","show","precondition","inventoryItem","pickedUpLocation","item","push","greyOut","thing","color","type","requiredElement","message","failedMessage","showOnCondition","inventory","addToInventory","getInventory","clearInventory","getItem","pName","inInventory","itemCode","itemQty","itemName","appendItemHTML","itemHTML","itemDescriptionHTML","remove","removeItemHTML","textContent","pNameCheck","newItem","inventoryTab","inventoryTabContent","tab","word","toUpperCase","substr","toLowerCase","tabContent","description","clearInventoryHTML","playerStat","getStat","addNewStat","newStat","loadStat","clearAllStat","appendStatHTML","clearStatHTML","showAllStatHTML","applyConsequence","getCurrentParagraphName","modifyStatValue","hide","updateStatHTML","handleStats","checkStat","elementId","elementHTML","checkResult","failed","passed","checkInInventory","checkChoiceCondition","choice","condition","a","b","temp","choiceHTML","classList","add","Save","pname","currentParagraphName","date","Date","toLocaleString","save","JSON","stringify","load","retrievedSave","updateParagraph","checked","loadPronounsRadioBtn","autoSave","localStorage","setItem","getSaveDesc","saveSlot","parse","checkItemCondition","preItem","requiredItem","currentParagraph","itemContainer","choiceContainer","findIndex","nextParagraph","items","currentName","paragraphContainerContent","currentChoice","contains","parent","firstChild","removeChild","removeAllChildNodes","showChoices","currentItem","includes","pickedUp","newLocation","itemBlocked","once","showItems","target","matches","restartGame","onload","autoLoad","nameInput","slotNumber","getAttribute","saveMessage","saveOutput","btoa","select","exportStorageSave","exportSave","loadCode","atob","loadSaveCode"],"mappings":"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","file":"bundle.js","sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","/**\r\n * Player's info values. During initial start of the game, these value is used.\r\n * Will be overwritten by player's input during game play.\r\n */\r\nexport const player = {\r\n    id: 0,\r\n    playerName: \"\",\r\n    pronouns: {\r\n        Category: \"\",\r\n        subjectPro: \"\",\r\n        objectPro: \"\",\r\n        possAdj: \"\",\r\n        possessivePro: \"\",\r\n        reflex: \"\",\r\n        is: \"\", //he is, she is, they are\r\n    },\r\n};\r\n/**\r\n * Upon clicking restart, player character will use these default values.\r\n */\r\nexport let defaultPlayer = {\r\n    id: 0,\r\n    playerName: \"\",\r\n    pronouns: {\r\n        Category: \"\",\r\n        subjectPro: \"\",\r\n        objectPro: \"\",\r\n        possAdj: \"\",\r\n        possessivePro: \"\",\r\n        reflex: \"\",\r\n        is: \"\", //he is, she is, they are\r\n    },\r\n};\r\n","import { player } from \"./playerInfo\";\r\n/** List of pronouns. Add, edit or remove accordingly to author's needs.\r\n * To change structure i.e adding more field like title: \"Mr\"... refer to src/model/player.ts\r\n */\r\nexport const pronouns = [\r\n    {\r\n        Category: \"He/Him\",\r\n        subjectPro: \"he\",\r\n        objectPro: \"him\",\r\n        possAdj: \"his\",\r\n        possessivePro: \"his\",\r\n        reflex: \"himself\",\r\n        is: \"he is\",\r\n    },\r\n    {\r\n        Category: \"She/Her\",\r\n        subjectPro: \"she\",\r\n        objectPro: \"her\",\r\n        possAdj: \"her\",\r\n        possessivePro: \"hers\",\r\n        reflex: \"herself\",\r\n        is: \"she is\",\r\n    },\r\n    {\r\n        Category: \"They/Them\",\r\n        subjectPro: \"they\",\r\n        objectPro: \"them\",\r\n        possAdj: \"their\",\r\n        possessivePro: \"theirs\",\r\n        reflex: \"themselves\",\r\n        is: \"they are\",\r\n    }\r\n];\r\n/**\r\n * Show radio group with pronouns option for players to choose from.\r\n * Append radio buttons to HTML element with id = \"pronouns\".\r\n */\r\nexport function showPronounDialogue() {\r\n    let pronounsContainer = document.getElementById(\"pronouns\");\r\n    if (pronounsContainer) {\r\n        let pronounsLength = pronouns.length;\r\n        for (var i = 0; i < pronounsLength; i++) {\r\n            let pronounEntry = `\r\n            <input type=\"radio\" id=\"${pronouns[i].subjectPro}\" name=\"pronouns\" value=\"${pronouns[i].Category}\">\r\n            <label for=\"${pronouns[i].subjectPro}\">${pronouns[i].Category}</label><br>`;\r\n            pronounsContainer.innerHTML += pronounEntry;\r\n        }\r\n        pronounsContainer.addEventListener('click', getPronouns);\r\n    }\r\n}\r\n/**\r\n * Get Pronouns value from clicked radio button\r\n */\r\nexport function getPronouns() {\r\n    var selectedPronoun = document.querySelector('input[name=\"pronouns\"]:checked')?.value;\r\n    var found = pronouns.find(element => element.Category == selectedPronoun);\r\n    if (found) {\r\n        setPronouns(found);\r\n    }\r\n    ;\r\n    console.log(selectedPronoun);\r\n    console.log(player);\r\n}\r\n/**\r\n * Save player's selected pronoun\r\n * @param pronouns\r\n */\r\nexport function setPronouns(pronouns) {\r\n    player.pronouns = pronouns;\r\n    showPronouns(pronouns);\r\n}\r\nexport function loadPronounsRadioBtn(pronouns) {\r\n    let savedPronouns = document.getElementById(`${pronouns.subjectPro}`);\r\n    savedPronouns.checked = true;\r\n}\r\n/**\r\n * Show player's pronouns on all element with class = \"playerPronouns\"\r\n */\r\nexport function showPronouns(pronouns) {\r\n    let pronounsClassed = document.querySelectorAll(\".playerPronouns\");\r\n    if (pronounsClassed) {\r\n        pronounsClassed.forEach(element => element.innerHTML = `${pronouns.Category}`);\r\n    }\r\n}\r\n","import { defaultPlayer } from \"../../game/playerInfo\";\r\nimport { showPronouns } from \"./pronouns\";\r\nexport const player = {\r\n    id: 0,\r\n    playerName: \"\",\r\n    pronouns: {\r\n        Category: \"\",\r\n        subjectPro: \"\",\r\n        objectPro: \"\",\r\n        possAdj: \"\",\r\n        possessivePro: \"\",\r\n        reflex: \"\",\r\n        is: \"\", //he is, she is, they are\r\n    },\r\n};\r\nexport function getPlayer() {\r\n    return player;\r\n}\r\nexport function getDefaultPlayer() {\r\n    return defaultPlayer;\r\n}\r\n/**\r\n * Get pronouns set by the player.\r\n * @returns player's pronouns\r\n */\r\nexport function getPlayerPronouns() {\r\n    return getPlayer().pronouns;\r\n}\r\nexport function setPlayer(newPlayer) {\r\n    player.id = newPlayer.id;\r\n    player.playerName = newPlayer.playerName;\r\n    player.pronouns = newPlayer.pronouns;\r\n}\r\nexport function setName(inputName) {\r\n    player.playerName = inputName;\r\n}\r\n/**\r\n * Get player's name from HTML input element id = 'playerName'\r\n */\r\nexport function getName() {\r\n    var playerName = document.getElementById(\"playerName\").value;\r\n    console.log(`Player Name is: ${playerName}`);\r\n    setName(playerName);\r\n    showNameDiv(playerName);\r\n    console.log(player);\r\n}\r\n/**\r\n * Show player's name in a any element where class = \"yourName\"\r\n * @param playerName\r\n */\r\nexport function showNameDiv(playerName) {\r\n    const container = document.querySelectorAll(\".yourName\");\r\n    if (container) {\r\n        container.forEach(element => {\r\n            element.innerHTML = `${playerName} `;\r\n        });\r\n    }\r\n}\r\n/**Reset player information to initial value. */\r\nexport function resetPlayer() {\r\n    setPlayer(getDefaultPlayer());\r\n    showNameDiv(defaultPlayer.playerName);\r\n    showPronouns(defaultPlayer.pronouns);\r\n}\r\n",";\r\nexport var conStyle;\r\n(function (conStyle) {\r\n    conStyle[conStyle[\"show\"] = 0] = \"show\";\r\n    conStyle[conStyle[\"hidden\"] = 1] = \"hidden\";\r\n    conStyle[conStyle[\"hideReason\"] = 2] = \"hideReason\";\r\n})(conStyle || (conStyle = {}));\r\n;\r\n//TODO: implement show/hide/hideReason on Precondition. \r\n//Currently, precondition checks on default will always show reason why a choice cannot be clicked by default \r\n// const precondition: Precondition = {\r\n//     stat: [{\r\n//         statName: \"intellect\",\r\n//         value: 1\r\n//     }],\r\n//     item: [{\r\n//         itemName: \"key\",\r\n//         itemQty: 1,\r\n//         itemCode: \"key\"\r\n//     }]\r\n// }\r\nexport class singleParagraph {\r\n    constructor(p) {\r\n        this.paragraph = p;\r\n    }\r\n}\r\n","//stat can be used in precondition\r\nexport class Stat {\r\n    constructor(s, v) {\r\n        this.statName = s;\r\n        this.value = v;\r\n    }\r\n}\r\nexport var statStyle;\r\n(function (statStyle) {\r\n    statStyle[statStyle[\"hide\"] = 0] = \"hide\";\r\n    statStyle[statStyle[\"show\"] = 1] = \"show\";\r\n})(statStyle || (statStyle = {}));\r\n/**\r\n * Extends Stat, but has style.\r\n * Style property show or hide the Stat from view.\r\n */\r\nexport class statWithStyle extends Stat {\r\n    constructor(s, v, style) {\r\n        super(s, v);\r\n        this.style = style;\r\n    }\r\n}\r\n//stat style: hidden, default: show.\r\n//hidden stat use case: stat and value that author does not want to show player\r\n//like a variable that dictate which ending the player will receive (bad/good ending counter)\r\n","import { statStyle } from \"../core/model/Stat\";\r\nimport catImg from \"../../assets/images/cat.jpg\";\r\n// interface ParagraphPlus extends Paragraphs {\r\n//   special?: string;\r\n// }\r\n/**\r\n * Entry point. Contains all game content.\r\n * @param player\r\n * @returns paragraphs\r\n */\r\nexport function getParagraph(player) {\r\n    let paragraphs = [\r\n        {\r\n            name: \"start\",\r\n            content: `You start the game.`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `Kill the dragon?`,\r\n                    nextName: `kill-dragon`\r\n                },\r\n                {\r\n                    id: 2,\r\n                    content: `Let the dragon `,\r\n                    nextName: `let-burn`\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"kill-dragon\",\r\n            content: `Villagers are very happy\r\n        <img src=\"${catImg}\">`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `But there's more`,\r\n                    nextName: `dragon-revenge`\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"dragon-revenge\",\r\n            content: `The dragons are back to revenge!`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `Are you prepared enough?`,\r\n                    nextName: `battle`,\r\n                    consequence: {\r\n                        stat: [\r\n                            { statName: `skilled`, value: 10, style: statStyle.show },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    id: 2,\r\n                    content: `not prepared! Panic!`,\r\n                    nextName: `battle`,\r\n                    consequence: {\r\n                        stat: [\r\n                            { statName: `skilled`, value: 0, style: statStyle.show },\r\n                        ]\r\n                    }\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"battle\",\r\n            content: `Kill the dragons!`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `Kill it!`,\r\n                    nextName: `end-1`,\r\n                    precondition: {\r\n                        stat: [\r\n                            { statName: `skilled`, value: 10, },\r\n                        ],\r\n                    },\r\n                },\r\n                {\r\n                    id: 2,\r\n                    content: `Run`,\r\n                    nextName: `end-2`\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"end-1\",\r\n            content: `Everyone lives! hooray`,\r\n        },\r\n        {\r\n            name: \"end-2\",\r\n            content: `Everyone dies. Oh no.`,\r\n        },\r\n        {\r\n            name: \"let-burn\",\r\n            content: `The village burned to the ground. But you got coin from the dragon.`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `Go about your way`,\r\n                    nextName: `end-3`\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"end-3\",\r\n            content: `You are hunted across the country.\r\n  <br><b>The End</b>`,\r\n        },\r\n    ];\r\n    return paragraphs;\r\n}\r\n","//each itemCode must be unique\r\n//Don't use special characters in itemCode. There will be consequences (bug).\r\n/**\r\n * When player pick up and Item and put it into their inventory,\r\n * It'll turn into InventoryItem, which saves the item's info and\r\n * where it was picked up (its location - paragraph id)\r\n */\r\nexport class inventoryItem {\r\n    constructor(i, p) {\r\n        // pickedUpLocation: Array<Paragraphs[\"id\"]> = [];\r\n        this.pickedUpLocation = [];\r\n        this.item = i;\r\n        this.pickedUpLocation.push(p);\r\n    }\r\n}\r\n// type itemCondition = Omit<Items, 'description'>\r\n//NOTE for authors: Please refrain from  changing Paragraph's name as this would affect\r\n//pickedUpLocation and other paragraph's dependency\r\n","import { getPlayerPronouns } from \"../core/player/playerInfo\";\r\n/////////////////////////////Formatting tools////////////////////////////////////////\r\n/**\r\n *Capitalise the first letter in a string.\r\n */\r\nexport function capitalise(word) {\r\n    if (!word)\r\n        return word;\r\n    return word[0].toUpperCase() + word.substr(1).toLowerCase();\r\n}\r\n////////////////////////////////////////////////////////////////////////////////////\r\n/**Grey out text */\r\nexport function greyOut(thing) {\r\n    thing.style.color = \"#6A6C6E\";\r\n}\r\n////////////////////////Grammar tools//////////////////////////////////////////\r\n/**\r\n * Specify the verb form that goes with a set of pronouns.\r\n * Ex: (have) => She [has] a pen / They [have] a pen\r\n * @param form verb form that goes with 'she/he'\r\n * @param original base verb, usually goes with 'they/you/we'\r\n * @returns form or original, depends on the player's selected pronouns.\r\n */\r\nexport function verbForm(form, original) {\r\n    let pronoun = getPlayerPronouns();\r\n    if (pronoun.subjectPro == \"they\") {\r\n        return original;\r\n    }\r\n    else\r\n        return form;\r\n}\r\n//TODO: showOnCondition shows the string if the condition check has passed.\r\nexport function showOnCondition(type, requiredElement, value, message, failedMessage) {\r\n    switch (type) {\r\n        case (type = 'stat'):\r\n            //a = check in player's stat\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n        case (type = 'item'):\r\n            //a = check in player's inventory\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n        case (type = 'quest'):\r\n            //a = check in player's quest log\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n        case (type = 'variable'):\r\n            //a = check in player's variables\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n    }\r\n}\r\nshowOnCondition('stat', `athletic`, 12, `You could try to pry it open with your crowbar`, `There's nothing else you can do here<br>`);\r\n","import { inventoryItem } from \"../model/item\";\r\nimport { capitalise } from \"../../tools/formatting\";\r\nexport let inventory = [];\r\nfunction addToInventory(item) {\r\n    inventory.push(item);\r\n}\r\n/**\r\n * Transfer items form an array of items to the inventory one by one.\r\n * Use case: load inventory from save file && add a bulk of item from treasure chest to inventory\r\n * @param items Array of itemss\r\n */\r\nexport function loadBulkInventory(items) {\r\n    items.forEach(element => addToInventory(element));\r\n}\r\nexport function getInventory() {\r\n    return inventory;\r\n}\r\nexport function clearInventory() {\r\n    inventory.length = 0;\r\n    return inventory;\r\n}\r\nexport function getItem(item, pName) {\r\n    const inInventory = inventory.find(element => element.item.itemCode == item.itemCode);\r\n    if (!inInventory) {\r\n        let newItem = new inventoryItem(item, pName);\r\n        console.log(`${item.itemName} has been added to inventory`);\r\n        addToInventory(newItem);\r\n        console.log(inventory);\r\n        appendItemHTML(item);\r\n    }\r\n    else if (inInventory && inInventory.item.itemQty == 0) {\r\n        inInventory.item.itemQty += item.itemQty;\r\n        console.log(`${item.itemName} is already in the inventory. Adding 1 to quantity.`);\r\n        console.log(inventory);\r\n        appendItemHTML(inInventory.item);\r\n    }\r\n    else {\r\n        inInventory.item.itemQty += item.itemQty;\r\n        //when itemQty = 0, remove it from view.\r\n        if (inInventory.item.itemQty == 0) {\r\n            removeItemHTML(inInventory.item.itemCode);\r\n        }\r\n        else {\r\n            console.log(`${item.itemName} is already in the inventory. Adding 1 to quantity.`);\r\n            console.log(inventory);\r\n            //update item quantity on view\r\n            let quantityDiv = document.querySelector(`#${item.itemCode}-quantity`);\r\n            quantityDiv.textContent = `Quantity: ${inInventory.item.itemQty}`;\r\n            let pNameCheck = inInventory.pickedUpLocation.find(location => location == pName);\r\n            console.log(pNameCheck, pName);\r\n            if (!pNameCheck) {\r\n                inInventory.pickedUpLocation.push(pName);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**Remove a certain number of item in inventory.\r\n * When it reaches 0, remove item from view, but still keep it in inventory array.\r\n */\r\nexport function deleteItem(item, quantity) {\r\n    let toBeDeleted = getInventory().find(element => element.item.itemName == item.itemName && element.item.itemCode == item.itemCode);\r\n    toBeDeleted.item.itemQty -= quantity;\r\n    if (toBeDeleted.item.itemQty == 0) {\r\n        removeItemHTML(item.itemCode);\r\n    }\r\n}\r\n/**\r\n * Remove item from view.\r\n */\r\nexport function removeItemHTML(itemCode) {\r\n    let itemHTML = document.querySelector(`#pills-${itemCode}-tab`);\r\n    let itemDescriptionHTML = document.querySelector(`#pills-${itemCode}`);\r\n    itemHTML.remove();\r\n    itemDescriptionHTML.remove();\r\n}\r\n/**\r\n * After picking up an item, the item's name and description will be viewable on Inventory's UI\r\n * @param item\r\n */\r\nexport function appendItemHTML(item) {\r\n    let inventoryTab = document.querySelector(\"#inventory-tab\"); //(Bootstrap's tab pills)\r\n    let inventoryTabContent = document.querySelector(\"#inventory-tabContent\"); //(Bootstrap's tab-pane)\r\n    let tab = `<li class=\"nav-item\" role=\"presentation\">\r\n        <a class=\"nav-link\" \r\n        id=\"pills-${item.itemCode}-tab\" \r\n        data-bs-toggle=\"pill\" \r\n        href=\"#pills-${item.itemCode}\" \r\n        role=\"tab\" \r\n        aria-controls=\"pills-${item.itemCode}\" aria-selected=\"false\">${capitalise(item.itemName)}</a>\r\n        </li>`;\r\n    inventoryTab.innerHTML += tab;\r\n    let tabContent = `<div class=\"tab-pane fade\" \r\n    id=\"pills-${item.itemCode}\" \r\n    role=\"tabpanel\" \r\n    aria-labelledby=\"pills-${item.itemCode}-tab\">\r\n    ${item.description}\r\n    <div id=\"${item.itemCode}-quantity\">Quantity: ${item.itemQty}</div>\r\n    </div>`;\r\n    inventoryTabContent.innerHTML += tabContent;\r\n}\r\n/**\r\n * Clear all item from Inventory interface\r\n */\r\nexport function clearInventoryHTML() {\r\n    let inventoryTab = document.querySelector(\"#inventory-tab\");\r\n    let inventoryTabContent = document.querySelector(\"#inventory-tabContent\");\r\n    inventoryTab.textContent = '';\r\n    inventoryTabContent.textContent = '';\r\n}\r\n","import { statStyle, statWithStyle } from \"../model/Stat\";\r\n//Place the initial value of your player's Stat here, if you want to.\r\nexport let playerStat = [\r\n    { statName: \"Village Relationship\", value: 10, style: statStyle.show },\r\n    { statName: \"Strength\", value: 0, style: statStyle.show },\r\n    { statName: 'Intelligence', value: 0, style: statStyle.show }\r\n];\r\nexport function restoreDefaultStat() {\r\n    let defaultPlayerStat = [\r\n        { statName: \"Village\", value: 10, style: statStyle.show },\r\n        { statName: \"Strength\", value: 0, style: statStyle.show },\r\n        { statName: 'Intelligence', value: 0, style: statStyle.show }\r\n    ];\r\n    loadStat(defaultPlayerStat);\r\n}\r\nexport function getStat() {\r\n    return playerStat;\r\n}\r\n/**\r\n * Add new Stat to playerStat\r\n * @param statName\r\n * @param value\r\n */\r\nexport function addNewStat(statName, value, style) {\r\n    let newStat = new statWithStyle(statName, value, style);\r\n    getStat().push(newStat);\r\n}\r\n/** Add or subtract point from a stat\r\n * Note that the stat must exist before trying to modify it.\r\n*/\r\nexport function modifyStatValue(stat, value) {\r\n    let _stat = getStat().find(element => element.statName == stat.statName);\r\n    _stat.value += value;\r\n}\r\n/** Load Stats from an Array */\r\nexport function loadStat(stat) {\r\n    stat.forEach(element => addNewStat(element.statName, element.value, element.style));\r\n}\r\nexport function clearAllStat() {\r\n    getStat().length = 0;\r\n    return playerStat;\r\n}\r\nexport function deleteStat(statName) {\r\n    getStat().find(element => element.statName == statName);\r\n}\r\n//if stat already exist, add modify value, if not in playerStat, add to it.\r\nexport function handleStats(stat) {\r\n    let found = playerStat.find(element => element.statName == stat.statName);\r\n    if (found) {\r\n        console.log(`it is found`);\r\n        modifyStatValue(found, stat.value);\r\n        switch (stat.style) {\r\n            case (stat.style = statStyle.hide):\r\n                // do nothing :)\r\n                break;\r\n            default:\r\n                updateStatHTML(found);\r\n                break;\r\n        }\r\n        console.log(`Handled! modified ${found.value}`);\r\n    }\r\n    if (!found) {\r\n        addNewStat(stat.statName, stat.value, stat.style);\r\n        switch (stat.style) {\r\n            case (stat.style = statStyle.hide):\r\n                // do nothing :)\r\n                break;\r\n            default:\r\n                appendStatHTML(stat);\r\n                break;\r\n        }\r\n        console.log(`not found, so added new stat`);\r\n    }\r\n}\r\nexport function appendStatHTML(stat) {\r\n    let statContainer = document.querySelectorAll(`.stat`);\r\n    statContainer.forEach(element => {\r\n        element.innerHTML += `<div id='stat-${stat.statName}'>${stat.statName}: ${stat.value}</div>`;\r\n    });\r\n    // statContainer!.innerHTML += `<div id='stat-${stat.statName}'>${stat.statName}: ${stat.value}</div>`;\r\n}\r\nexport function clearStatHTML() {\r\n    let statContainer = document.querySelector(`.stat`);\r\n    statContainer.textContent = ``;\r\n}\r\n/** Show all Stat on the UI.\r\n * Use case: run when load game.\r\n */\r\nexport function showAllStatHTML(stat) {\r\n    stat.forEach(element => {\r\n        switch (element.style) {\r\n            case (element.style = statStyle.show):\r\n                appendStatHTML(element);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\nexport function updateStatHTML(stat) {\r\n    let statHTML = document.querySelector(`#stat-${stat.statName}`);\r\n    statHTML.innerHTML = `<div id='stat-${stat.statName}'>${stat.statName}: ${stat.value}</div>`;\r\n}\r\n//TODO: updateStatHTML: separate statName, stat value into two different HTML elements, preferably a table\r\n","import { getItem } from \"../inventory/inventory\";\r\nimport { getCurrentParagraphName } from \"../paragraphs/paragraphFunctions\";\r\nimport { handleStats } from \"../player/statInfos\";\r\n//Consequence: After a choice, player gain/loose item or stat point, or both.\r\nexport function applyConsequence(consequence) {\r\n    let item = consequence.item;\r\n    let stat = consequence.stat;\r\n    if (item) {\r\n        item.forEach(item => {\r\n            getItem(item, getCurrentParagraphName());\r\n        });\r\n    }\r\n    if (stat) {\r\n        stat.forEach(stat => {\r\n            handleStats(stat);\r\n        });\r\n    }\r\n}\r\n","import { getInventory } from \"../inventory/inventory\";\r\nimport { getStat } from \"../player/statInfos\";\r\nimport { checkResult } from \"./choiceCondition\";\r\n/**\r\n * Check if player's stat satisfy precondition\r\n * @param elementId HTML element's id\r\n * @param statName required stat's name\r\n * @param value required value\r\n * @returns enum checkResult passed or failed.\r\n */\r\nexport function checkStat(elementId, statName, value) {\r\n    let found = getStat().find(element => element.statName == statName);\r\n    let elementHTML = document.querySelector(`#${elementId}`);\r\n    if (found) {\r\n        if (found.value < value) {\r\n            // console.log(`Condition not met: ${found.value} < ${value}`);\r\n            //show reason why it's failed\r\n            elementHTML.innerHTML += ` [Condition not met: ${statName} value ${found.value}/${value}]`;\r\n            return checkResult.failed;\r\n        }\r\n        if (found.value >= value) {\r\n            console.log(\"Condition met. Proceed.\");\r\n            //let the player click on the choice\r\n            return checkResult.passed;\r\n        }\r\n    }\r\n    else {\r\n        console.log(\"Condition not met!\");\r\n        elementHTML.innerHTML += ` [Condition not met: player doesn't have stat \"${statName}\"]`;\r\n        return checkResult.failed;\r\n    }\r\n}\r\n;\r\n/**\r\n * Check if required item is in player's inventory\r\n * @param choiceId\r\n * @param itemCode\r\n * @param itemName\r\n * @param itemQty\r\n * @returns checkResult passed or failed\r\n */\r\nexport function checkInInventory(elementId, itemCode, itemQty, itemName) {\r\n    const inInventory = getInventory().find(element => element.item.itemCode == itemCode);\r\n    let elementHTML = document.querySelector(elementId);\r\n    if (!inInventory) {\r\n        elementHTML.innerHTML += ` [Condition not met: ${itemName} cannot be found in inventory]`;\r\n        return checkResult.failed;\r\n    }\r\n    else if (inInventory && inInventory.item.itemQty < itemQty) {\r\n        elementHTML.innerHTML += ` [Condition not met: ${itemName} quantity ${inInventory.item.itemQty}/${itemQty}]`;\r\n        return checkResult.failed;\r\n    }\r\n    else {\r\n        console.log(`Condition: ${itemName} found in inventory! Proceed`);\r\n        //let the player click on the choice\r\n        return checkResult.passed;\r\n    }\r\n}\r\n","//Check if player's stat meet the need to proceed.\r\n//For example, the choice \"Climb the tree [Athletic 10]\" needs Athletic = 10\r\nimport { greyOut } from \"../../tools/formatting\";\r\nimport { checkInInventory, checkStat } from \"./checkConditions\";\r\n//before this, check if choice has precondition.\r\n//if there's no condition on a choice, skip this function entirely.\r\n/**\r\n * Check all precondition of a single choice.\r\n * @param choice\r\n * @param condition\r\n */\r\nexport function checkChoiceCondition(choice, condition) {\r\n    let item = condition.item;\r\n    let stat = condition.stat;\r\n    let a, b;\r\n    if (item) {\r\n        item.forEach(item => {\r\n            let temp = checkInInventory(`#cid${choice.id}`, item.itemCode, item.itemQty, item.itemName);\r\n            if (temp == checkResult.failed) {\r\n                a = temp;\r\n            }\r\n        });\r\n    }\r\n    if (stat) {\r\n        stat.forEach(stat => {\r\n            let temp = checkStat(`cid${choice.id}`, stat.statName, stat.value);\r\n            if (temp == checkResult.failed) {\r\n                b = temp;\r\n            }\r\n        });\r\n    }\r\n    if (a == checkResult.failed || b == checkResult.failed) {\r\n        let choiceHTML = document.querySelector(`#cid${choice.id}`);\r\n        greyOut(choiceHTML);\r\n        choiceHTML.classList.add(\"choice-blocked\");\r\n        console.log(`${choice.id} is blocked`);\r\n    }\r\n}\r\n/**Show/hide/ */\r\n// function handleConditionHTML(choiceId: Choices['id'], message: string, style: conStyle | undefined) {\r\n//     switch (style) {\r\n//         case (0): //show    \r\n//             let choiceHTML = document.querySelector(`#cid${choiceId}`);\r\n//             // greyOut((<HTMLElement>choiceHTML));\r\n//             choiceHTML!.innerHTML += message;\r\n//             // choiceHTML!.classList.add(\"choice-blocked\");\r\n//             break;\r\n//         case (1): //hidden - hide the entire choice\r\n//             choiceHTML = document.querySelector(`#cid${choiceId}`);\r\n//             choiceHTML!.innerHTML = ``\r\n//             break;\r\n//         case (2): //hide reason\r\n//             // choiceHTML = document.querySelector(`#cid${choiceId}`);\r\n//             // greyOut((<HTMLElement>choiceHTML));\r\n//             // choiceHTML!.classList.add(\"choice-blocked\");\r\n//             break;\r\n//         default: //do nothing, leave it alone.\r\n//             break;\r\n//     }\r\n// }\r\nexport var checkResult;\r\n(function (checkResult) {\r\n    checkResult[checkResult[\"passed\"] = 0] = \"passed\";\r\n    checkResult[checkResult[\"failed\"] = 1] = \"failed\";\r\n    // notFound = 2,\r\n    // insufficientQuantity = 3,\r\n})(checkResult || (checkResult = {}));\r\n","export class Save {\r\n    constructor(p, i, pname, s) {\r\n        this.player = p;\r\n        this.inventory = i;\r\n        this.currentParagraphName = pname;\r\n        this.stat = s;\r\n        this.date = new Date().toLocaleString();\r\n    }\r\n}\r\n// let save1 = new Save(getPlayer(), inventory, getParagraph.id)\r\n// new save -> stringify save -> push into local storage\r\n// load: get from local storage or save string -> json parse -> put data back\r\n","import { appendItemHTML, clearInventory, clearInventoryHTML, getInventory, loadBulkInventory } from \"../inventory/inventory\";\r\nimport { clearAllStat, clearStatHTML, getStat, loadStat, showAllStatHTML } from \"../player/statInfos\";\r\nimport { Save } from \"../model/save\";\r\nimport { getCurrentParagraphName, updateParagraph } from \"../paragraphs/paragraphFunctions\";\r\nimport { getPlayer, setPlayer, showNameDiv } from \"../player/playerInfo\";\r\nimport { loadPronounsRadioBtn, showPronouns } from \"../player/pronouns\";\r\n/**\r\n * Create a new save and stringify it.\r\n */\r\nfunction save() {\r\n    let save = new Save(getPlayer(), getInventory(), getCurrentParagraphName(), getStat());\r\n    let stringSave = JSON.stringify(save);\r\n    return stringSave;\r\n}\r\nfunction load(retrievedSave) {\r\n    clearInventory();\r\n    clearInventoryHTML();\r\n    setPlayer(retrievedSave.player);\r\n    loadBulkInventory(retrievedSave.inventory);\r\n    clearAllStat();\r\n    clearStatHTML();\r\n    loadStat(retrievedSave.stat);\r\n    showAllStatHTML(retrievedSave.stat);\r\n    updateParagraph(retrievedSave.currentParagraphName, retrievedSave.player);\r\n    retrievedSave.inventory.forEach((element) => {\r\n        if (element.item.itemQty > 0) {\r\n            appendItemHTML(element.item);\r\n        }\r\n    });\r\n    showNameDiv(retrievedSave.player.playerName);\r\n    showPronouns(retrievedSave.player.pronouns);\r\n    let savedPronouns = document.getElementById(`${retrievedSave.player.pronouns.subjectPro}`);\r\n    if (savedPronouns) {\r\n        loadPronounsRadioBtn(retrievedSave.player.pronouns);\r\n    }\r\n}\r\n// TODO: user should be able to toggle auto-save on/off\r\nexport function autoSave() {\r\n    localStorage.setItem('autoSave', save());\r\n}\r\nexport function autoLoad() {\r\n    let retrievedSave = JSON.parse(localStorage.getItem('autoSave'));\r\n    if (retrievedSave) {\r\n        load(retrievedSave);\r\n    }\r\n}\r\n/**\r\n * Save the game's state to LocalStorage\r\n * @param saveSlot string that would later used as LocalStorage key.\r\n */\r\nexport function newSave(saveSlot) {\r\n    //check if LocalStorage is supported on client's browser\r\n    if (typeof (Storage) !== \"undefined\") {\r\n        console.log(`LocalStorage is supported! Saved file to ${saveSlot}`);\r\n        localStorage.setItem(saveSlot, save());\r\n        getSaveDesc(saveSlot);\r\n    }\r\n    else {\r\n        console.log(\"LocalStorage is not supported in this browser! Please export the save code instead.\");\r\n    }\r\n}\r\n//TODO: Make a proper LocalStorage is not supported message that shows on page, not just in console.\r\nexport function loadSave(saveSlot) {\r\n    if (typeof (Storage) !== \"undefined\") {\r\n        console.log(\"LocalStorage is supported!\");\r\n        let retrievedSave = JSON.parse(localStorage.getItem(saveSlot));\r\n        load(retrievedSave);\r\n    }\r\n    else {\r\n        console.log(\"LocalStorage is not supported in this browser! Please export the save code instead.\");\r\n    }\r\n}\r\nexport function exportStorageSave(saveSlot) {\r\n    let retrievedSave = localStorage.getItem(saveSlot);\r\n    let saveMessage = document.querySelector('#exportMessage');\r\n    saveMessage.textContent = null; //clear old message\r\n    saveMessage.innerHTML += `Save exported from ${saveSlot}.<br> \r\n    Copy and keep the code bellow to load later`;\r\n    let saveOutput = document.querySelector(`#saveOutput`);\r\n    saveOutput.value = ``; //clear old save\r\n    saveOutput.value = `${btoa(retrievedSave)}`; //encode to Base64\r\n    saveOutput.select();\r\n}\r\n/**\r\n * Generate a random-looking string that save the game's progress.\r\n * The string is encoded to Base64 to prevent players (to an extent) from altering their save.\r\n */\r\nexport function exportSave() {\r\n    let saveMessage = document.querySelector('#exportMessage');\r\n    saveMessage.textContent = null; //clear old message\r\n    saveMessage.innerHTML += `Save created at ${new Date().toLocaleString()}.<br> \r\n    Copy and keep the code bellow to load later`;\r\n    let saveOutput = document.querySelector(`#saveOutput`);\r\n    saveOutput.value = ``; //clear old save\r\n    saveOutput.value += `${btoa(save())}`; //encode to Base64\r\n    saveOutput.select();\r\n}\r\n/**\r\n * Get Save Code from textarea id = \"saveOutput\"\r\n * Decode the encoded save string and load game.\r\n */\r\nexport function loadSaveCode() {\r\n    let loadCode = document.querySelector(\"#saveOutput\").value;\r\n    loadCode = atob(loadCode);\r\n    console.log(loadCode);\r\n    let retrievedSave = JSON.parse(loadCode);\r\n    console.log(retrievedSave);\r\n    load(retrievedSave);\r\n    let loadMessage = document.querySelector(`#exportMessage`);\r\n    loadMessage.innerHTML += `<div class=\"alert alert-warning alert-dismissible fade show mt-1\" role=\"alert\">\r\n        <strong> Load Success! </strong> Loaded save from ${retrievedSave.date}.\r\n            <button type = \"button\" class=\"btn-close\" data - bs - dismiss=\"alert\" aria - label=\"Close\"> </button>\r\n                </div>`;\r\n    //TODO: verify if save is valid. \r\n    //TODO: fallback: If load is invalid, start new game.\r\n}\r\nexport function getSaveDesc(saveSlot) {\r\n    let retrievedSave = JSON.parse(localStorage.getItem(saveSlot));\r\n    let description = retrievedSave.date;\r\n    let descContainer = document.querySelector(`#saveDesc-${saveSlot}`);\r\n    descContainer.innerHTML = description;\r\n}\r\n","import { greyOut } from \"../../tools/formatting\";\r\nimport { checkInInventory, checkStat } from \"./checkConditions\";\r\nimport { checkResult } from \"./choiceCondition\";\r\nexport function checkItemCondition(item, condition) {\r\n    let preItem = condition.item;\r\n    let stat = condition.stat;\r\n    let a, b;\r\n    if (preItem) {\r\n        preItem.forEach(requiredItem => {\r\n            let temp = checkInInventory(`#${item.itemCode}`, requiredItem.itemCode, requiredItem.itemQty, requiredItem.itemName);\r\n            if (temp == checkResult.failed) {\r\n                a = temp;\r\n            }\r\n        });\r\n    }\r\n    if (stat) {\r\n        stat.forEach(stat => {\r\n            let temp = checkStat(item.itemCode, stat.statName, stat.value);\r\n            if (temp == checkResult.failed) {\r\n                b = temp;\r\n            }\r\n        });\r\n    }\r\n    if (a == checkResult.failed || b == checkResult.failed) {\r\n        let itemHTML = document.querySelector(`#${item.itemCode}`);\r\n        greyOut(itemHTML);\r\n        itemHTML.classList.add(\"item-blocked\");\r\n        console.log(`${item.itemCode} is blocked`);\r\n    }\r\n}\r\n// function appendInventoryReason(elementId: string, itemName: string, reqQty: number, actualQty: number, result: checkResult) {\r\n//     let elementHTML = document.querySelector(`#${elementId}`);\r\n//     switch (result) {\r\n//         case (result = checkResult.notFound):\r\n//             elementHTML!.innerHTML += ` [Condition not met: ${itemName} cannot be found in inventory]`;\r\n//             break;\r\n//         case (result = checkResult.insufficientQuantity):\r\n//             elementHTML!.innerHTML += ` [Condition not met: ${itemName} quantity ${actualQty}/${reqQty}]`;\r\n//             break;\r\n//     }\r\n// }\r\n","import { singleParagraph } from \"../model/paragraph\";\r\nimport { getName, getPlayer } from \"../player/playerInfo\";\r\nimport { showPronounDialogue } from \"../player/pronouns\";\r\nimport { getParagraph } from \"../../game/allParagraphs\";\r\nimport { showChoices } from \"./showChoices\";\r\nimport { showItems } from \"./showItems\";\r\nlet currentParagraph;\r\nconst itemContainer = document.getElementById(\"items\");\r\nconst choiceContainer = document.getElementById(\"choices\");\r\n/**Get nextName, then show the paragraph with that name.\r\n  * @param {number} nextName next paragraph's name.\r\n  * @param {string} style optional. Update paragraph style. Leave blank for default: clear previous paragraph then show the next one.\r\n*/\r\nexport function updateParagraph(nextName, style) {\r\n    let player = getPlayer();\r\n    let pName = getParagraph(player).findIndex(element => element.name == nextName);\r\n    let p = new singleParagraph(getParagraph(player)[pName]);\r\n    let nextParagraph = p.paragraph;\r\n    // let nextParagraph = getParagraph(player)[nextid];\r\n    let items = null;\r\n    itemContainer.innerHTML = null;\r\n    setCurrentParagraphName(nextName);\r\n    // append paragraph content according to its style property.\r\n    switch (style) {\r\n        case \"append\":\r\n            currentParagraph = currentParagraph + \" \" + nextParagraph.content;\r\n            paragraphContainerContent(currentParagraph);\r\n            break;\r\n        default:\r\n            paragraphContainerContent(null);\r\n            currentParagraph = nextParagraph.content;\r\n            paragraphContainerContent(currentParagraph);\r\n            break;\r\n    }\r\n    // get choices, clear choice container div & append new content.\r\n    let choices = nextParagraph.choices;\r\n    choiceContainer.textContent = null;\r\n    showChoices(choices, choiceContainer);\r\n    items = nextParagraph.item;\r\n    if (items) {\r\n        showItems(items, itemContainer, nextName);\r\n    }\r\n    // if paragraph content has element id = \"pronouns\"\r\n    if (document.getElementById(\"pronouns\")) {\r\n        showPronounDialogue();\r\n        if (player.pronouns.Category != \"\") {\r\n            let selectedPronoun = document.getElementById(player.pronouns.subjectPro);\r\n            selectedPronoun.checked = true;\r\n        }\r\n    }\r\n    // if paragraph content has playerName input field: \r\n    if (document.querySelector(\"input#playerName\")) {\r\n        document.addEventListener(\"keyup\", function (e) {\r\n            // e.target was the clicked element\r\n            if (e.target && e.target.matches(\"input#playerName\")) {\r\n                getName();\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set the content of HTML element id = 'paragraph'\r\n * @param content : string or null to clear all content\r\n */\r\nfunction paragraphContainerContent(content) {\r\n    const paragraphContainer = document.getElementById(\"paragraph\");\r\n    paragraphContainer.innerHTML = content;\r\n}\r\nexport function choiceContainerContent(content) {\r\n    const choiceContainer = document.getElementById(\"choices\");\r\n    choiceContainer.innerHTML += content;\r\n}\r\nlet currentName = \"start\";\r\nfunction setCurrentParagraphName(name) {\r\n    currentName = name;\r\n}\r\nexport function getCurrentParagraphName() {\r\n    return currentName;\r\n}\r\n","import { applyConsequence } from \"../conditions/consequences\";\r\nimport { checkChoiceCondition } from \"../conditions/choiceCondition\";\r\nimport { autoSave } from \"../script/saveScript\";\r\nimport { updateParagraph } from \"./paragraphFunctions\";\r\n/**\r\n * Show available choices in a paragraph\r\n * @param choices should takes the value of allParagraphs[nextid].choices\r\n * @param choiceContainer document.getElementById(\"choices\");\r\n */\r\nexport function showChoices(choices, choiceContainer) {\r\n    if (choices) {\r\n        for (let i = 0; i < choices.length; i++) {\r\n            let currentChoice = choices[i];\r\n            let choice = `<a href=\"#\" \r\n            class=\"choices\" id=\"cid${currentChoice.id}\" >\r\n            ${currentChoice.content} \r\n            </a><br>`;\r\n            choiceContainer.innerHTML += choice;\r\n            if (currentChoice.precondition) {\r\n                console.log(`choice n.${currentChoice.id} has condition!`);\r\n                checkChoiceCondition(currentChoice, currentChoice.precondition);\r\n            }\r\n            else {\r\n                // console.log(`choice n.${currentChoice.id} has no condition`);\r\n            }\r\n            //if(currentChoice.quest){\r\n            //\r\n            //}\r\n        }\r\n        for (let i = 0; i < choices.length; i++) {\r\n            let currentChoice = choices[i];\r\n            let nextName = currentChoice.nextName;\r\n            let style = choices[i].style;\r\n            let choiceHTML = choiceContainer.querySelector(`#cid${currentChoice.id}`);\r\n            //if element doesn't have class choice-blocked, add event listener, else, don't do anything\r\n            if (!choiceHTML.classList.contains(\"choice-blocked\")) {\r\n                choiceHTML.addEventListener('click', function () {\r\n                    if (currentChoice.consequence) {\r\n                        applyConsequence(currentChoice.consequence);\r\n                    }\r\n                    removeChoices();\r\n                    updateParagraph(nextName, style);\r\n                    autoSave();\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction removeChoices() {\r\n    let choiceContainer = document.querySelector('#choices');\r\n    removeAllChildNodes(choiceContainer);\r\n}\r\nfunction removeAllChildNodes(parent) {\r\n    while (parent.firstChild) {\r\n        parent.removeChild(parent.firstChild);\r\n    }\r\n}\r\n","import { getInventory, getItem } from \"../inventory/inventory\";\r\nimport { autoSave } from \"../script/saveScript\";\r\nimport { checkItemCondition } from \"../conditions/itemCondition\";\r\nimport { getCurrentParagraphName } from \"./paragraphFunctions\";\r\nexport function showItems(items, itemContainer, pname) {\r\n    //these are kinda ugly but oh my god did it run :( Probably should refactor some other time\r\n    for (var i = 0; i < items.length; i++) {\r\n        let currentItem = items[i];\r\n        let found = getInventory().find(element => element.item.itemName == currentItem.itemName && element.item.itemCode == currentItem.itemCode);\r\n        if (found) { //item name is in inventory\r\n            //Check if item had been found at this location\r\n            console.log(pname);\r\n            let pNameCheck = found.pickedUpLocation.includes(`${pname}`);\r\n            console.log(pNameCheck);\r\n            if (pNameCheck) {\r\n                let message = `<a href=\"#\" class=\"items picked\" id=\"${currentItem.itemCode}\">[Added to Inventory] You've already picked up ${currentItem.itemName}</a><br>`;\r\n                console.log(`${currentItem.itemName} is already picked up at this location (${pname})`);\r\n                itemContainer.innerHTML += message;\r\n            }\r\n            else { //not found at this location\r\n                let item = `<a href=\"#\" class=\"items item-new-location\" id=\"${currentItem.itemCode}\">You found ×${currentItem.itemQty} ${currentItem.itemName}</a><br>`;\r\n                itemContainer.innerHTML += item;\r\n                if (currentItem.precondition) {\r\n                    checkItemCondition(currentItem, currentItem.precondition);\r\n                }\r\n            }\r\n        }\r\n        else { //entirely new item name, entirely new location\r\n            let item = `<a href=\"#\" class=\"items\" id=\"${currentItem.itemCode}\">You found ×${currentItem.itemQty} ${currentItem.itemName}</a><br>`;\r\n            itemContainer.innerHTML += item;\r\n            if (currentItem.precondition) {\r\n                checkItemCondition(currentItem, currentItem.precondition);\r\n            }\r\n        }\r\n    }\r\n    //add Event listener\r\n    for (var i = 0; i < items.length; i++) {\r\n        let currentItem = items[i];\r\n        let itemHTML = itemContainer.querySelector(`#${currentItem.itemCode}`);\r\n        let pickedUp = itemHTML.classList.contains(`picked`);\r\n        let newLocation = itemHTML.classList.contains(`item-new-location`);\r\n        //if item has class item-new-location, push new location and add to quantity\r\n        let itemBlocked = itemHTML?.classList.contains(\"item-blocked\");\r\n        if (newLocation) {\r\n            itemHTML.addEventListener(\"click\", function () {\r\n                getItem(currentItem, getCurrentParagraphName());\r\n                let message = `[Added to Inventory] You picked up ${currentItem.itemName}`;\r\n                itemHTML.innerHTML = message;\r\n                itemHTML.style.color = \"#6A6C6E\";\r\n                autoSave();\r\n            }, { once: true });\r\n        }\r\n        else if (itemBlocked) {\r\n            //do nothing :) \r\n        }\r\n        else if (pickedUp) {\r\n            itemHTML.style.color = \"#6A6C6E\";\r\n        }\r\n        else { //entirely new item name, entirely new location\r\n            itemHTML.addEventListener(\"click\", function () {\r\n                getItem(currentItem, getCurrentParagraphName());\r\n                console.log(currentItem.itemName);\r\n                let message = `[Added to Inventory] You picked up ${currentItem.itemName}`;\r\n                itemHTML.innerHTML = message;\r\n                itemHTML.style.color = \"#6A6C6E\";\r\n                autoSave();\r\n            }, { once: true });\r\n        }\r\n    }\r\n}\r\n","import { clearInventory, clearInventoryHTML } from \"../inventory/inventory\";\r\nimport { conStyle } from \"../model/paragraph\";\r\nimport { updateParagraph } from \"../paragraphs/paragraphFunctions\";\r\nimport { resetPlayer } from \"../player/playerInfo\";\r\nimport { clearAllStat, clearStatHTML, getStat, restoreDefaultStat, showAllStatHTML } from \"../player/statInfos\";\r\nimport { autoSave } from \"./saveScript\";\r\nexport function restartGame() {\r\n    clearInventory();\r\n    resetPlayer();\r\n    clearInventoryHTML();\r\n    clearAllStat();\r\n    clearStatHTML();\r\n    restoreDefaultStat();\r\n    showAllStatHTML(getStat());\r\n    updateParagraph(\"start\");\r\n    autoSave();\r\n}\r\n;\r\n/**\r\n * Toggle the appearance of reason on choices\r\n * 3 cases: show both the choice and the condition\r\n * hide choice if condition is not met\r\n * hide the reason\r\n */\r\nexport function toggleReason(style) {\r\n    switch (style) {\r\n        case (style = conStyle.hidden):\r\n            //hide reason and choice\r\n            break;\r\n        case (style = conStyle.hideReason):\r\n            //hide reason only\r\n            break;\r\n        case (style = conStyle.show):\r\n            //show choice and reason\r\n            break;\r\n    }\r\n}\r\n/**\r\n * Increase font size\r\n */\r\nexport function setFontSize(size) {\r\n}\r\n//TODO: use this some later time\r\n// let gameInfo: gameDetails = {\r\n//     gameVersion: `0.0.1`,\r\n//     IFID: ``,\r\n//     name: `Demo`,\r\n//     description: ``,\r\n//     author: `Author Name`, //your name\r\n//     engineVersion: `0.0.1`,\r\n//     engine: ``\r\n// }\r\n","import { getName } from \"../player/playerInfo\";\r\nimport { showPronounDialogue } from \"../player/pronouns\";\r\nimport { updateParagraph } from \"../paragraphs/paragraphFunctions\";\r\nimport { autoLoad, exportSave, exportStorageSave, getSaveDesc, loadSave, loadSaveCode, newSave } from \"./saveScript\";\r\nimport { restartGame } from \"./settings\";\r\nimport { getStat, showAllStatHTML } from \"../player/statInfos\";\r\n///////////////////Initialize game///////////////////\r\nwindow.onload = function () {\r\n    //check if autoSave exits?\r\n    let autoSave = localStorage.getItem('autoSave');\r\n    if (autoSave) {\r\n        autoLoad();\r\n    }\r\n    else {\r\n        updateParagraph(\"start\");\r\n        showAllStatHTML(getStat());\r\n    }\r\n};\r\n// Add event listener to HTML element input with id = \"playerName\"\r\nconst nameInput = document.querySelector(\"#playerName\");\r\nif (nameInput) {\r\n    nameInput.addEventListener('keyup', getName);\r\n}\r\n;\r\n////////////////////button!!!!!!!!!!!!/////////////\r\nconst button = document.querySelector(\"#coolbutton\");\r\nfunction doThing(thing) {\r\n    console.log(\"thing!\");\r\n}\r\nif (button) {\r\n    button.addEventListener('click', doThing);\r\n}\r\n///////////////////////////////////////////////////\r\nshowPronounDialogue();\r\n// Add event listener to all Save buttons\r\nconst saveButton = document.querySelectorAll(\".save\");\r\nsaveButton.forEach(element => {\r\n    let slotNumber = element.getAttribute(\"value\");\r\n    element.addEventListener('click', function () {\r\n        newSave(slotNumber);\r\n    });\r\n});\r\n// Add event listener to all Load buttons\r\nconst loadButton = document.querySelectorAll(\".load\");\r\nloadButton.forEach(element => {\r\n    let slotNumber = element.getAttribute(\"value\");\r\n    element.addEventListener('click', function () {\r\n        loadSave(slotNumber);\r\n    });\r\n});\r\n// Add event listener to all Load buttons\r\nconst exportLocalSaveBtn = document.querySelectorAll(\".export\");\r\nexportLocalSaveBtn.forEach(element => {\r\n    let slotNumber = element.getAttribute(\"value\");\r\n    element.addEventListener('click', function () {\r\n        exportStorageSave(slotNumber);\r\n    });\r\n});\r\n// Add event listener to export save button\r\nconst exportSaveBtn = document.querySelector(\".exportSave\");\r\nexportSaveBtn?.addEventListener('click', function () {\r\n    exportSave();\r\n});\r\n// Add event listener to import save button\r\nconst importSaveBtn = document.querySelector(\".importSave\");\r\nimportSaveBtn?.addEventListener(`click`, function () {\r\n    loadSaveCode();\r\n});\r\n// Add event listener to restart game button\r\nconst restartBtn = document.querySelector(\".restartBtn\");\r\nrestartBtn?.addEventListener('click', function () { restartGame(); });\r\n// Load save Description, from slot 1 to 3\r\nfor (let i = 1; i < 4; i++) {\r\n    if (localStorage.getItem(`slot-${i}`)) {\r\n        getSaveDesc(`slot-${i}`);\r\n    }\r\n}\r\n"],"sourceRoot":""}