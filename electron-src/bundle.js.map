{"version":3,"sources":["webpack://veinif/webpack/bootstrap","webpack://veinif/webpack/runtime/global","webpack://veinif/webpack/runtime/publicPath","webpack://veinif/./src/game/playerInfo.ts","webpack://veinif/./src/core/player/pronouns.ts","webpack://veinif/./src/core/player/playerInfo.ts","webpack://veinif/./src/core/model/paragraph.ts","webpack://veinif/./src/core/model/Stat.ts","webpack://veinif/./src/tools/formatting.ts","webpack://veinif/./src/game/allParagraphs.ts","webpack://veinif/./src/core/model/item.ts","webpack://veinif/./src/core/inventory/inventory.ts","webpack://veinif/./src/core/player/statInfos.ts","webpack://veinif/./src/core/conditions/consequences.ts","webpack://veinif/./src/core/conditions/checkConditions.ts","webpack://veinif/./src/core/conditions/choiceCondition.ts","webpack://veinif/./src/core/model/save.ts","webpack://veinif/./src/core/script/saveScript.ts","webpack://veinif/./src/core/conditions/itemCondition.ts","webpack://veinif/./src/core/paragraphs/paragraphFunctions.ts","webpack://veinif/./src/core/paragraphs/showChoices.ts","webpack://veinif/./src/core/paragraphs/showItems.ts","webpack://veinif/./src/core/script/settings.ts","webpack://veinif/./src/core/script/index.ts"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","defaultPlayer","id","playerName","pronouns","Category","subjectPro","objectPro","possAdj","possessivePro","reflex","is","showPronounDialogue","pronounsContainer","getElementById","pronounsLength","i","pronounEntry","innerHTML","addEventListener","getPronouns","selectedPronoun","querySelector","value","found","find","element","showPronouns","setPronouns","console","log","pronounsClassed","querySelectorAll","forEach","getPlayer","setPlayer","newPlayer","getName","inputName","showNameDiv","container","statStyle","conStyle","singleParagraph","paragraph","capitalise","word","toUpperCase","substr","toLowerCase","greyOut","thing","style","color","type","requiredElement","message","failedMessage","showOnCondition","statWithStyle","s","v","statName","super","getParagraph","player","name","content","choices","nextName","item","itemName","itemQty","description","itemCode","precondition","stat","form","original","consequence","show","hide","cat","inventoryItem","pickedUpLocation","push","inventory","addToInventory","getInventory","clearInventory","getItem","pName","inInventory","appendItemHTML","itemHTML","itemDescriptionHTML","remove","removeItemHTML","textContent","pNameCheck","newItem","inventoryTab","inventoryTabContent","tab","tabContent","clearInventoryHTML","playerStat","getStat","addNewStat","newStat","loadStat","clearAllStat","appendStatHTML","clearStatHTML","showAllStatHTML","applyConsequence","getCurrentParagraphName","modifyStatValue","updateStatHTML","handleStats","checkStat","elementId","elementHTML","checkResult","failed","passed","checkInInventory","checkChoiceCondition","choice","condition","a","b","temp","choiceHTML","classList","add","Save","pname","currentParagraphName","date","Date","toLocaleString","save","JSON","stringify","load","retrievedSave","updateParagraph","checked","loadPronounsRadioBtn","autoSave","localStorage","setItem","getSaveDesc","saveSlot","parse","checkItemCondition","preItem","requiredItem","currentParagraph","findIndex","nextParagraph","choiceContainer","itemContainer","items","currentName","paragraphContainerContent","currentChoice","contains","parent","firstChild","removeChild","removeAllChildNodes","showChoices","currentItem","includes","pickedUp","newLocation","itemBlocked","once","showItems","target","matches","restartGame","onload","autoLoad","nameInput","slotNumber","getAttribute","saveMessage","saveOutput","btoa","select","exportStorageSave","exportSave","loadCode","atob","loadSaveCode"],"mappings":"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","file":"bundle.js","sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","/**\r\n * Player's info values. During initial start of the game, these value is used.\r\n * Will be overwritten by player's input during game play.\r\n */\r\nexport const player = {\r\n    id: 0,\r\n    playerName: \"\",\r\n    pronouns: {\r\n        Category: \"\",\r\n        subjectPro: \"\",\r\n        objectPro: \"\",\r\n        possAdj: \"\",\r\n        possessivePro: \"\",\r\n        reflex: \"\",\r\n        is: \"\", //he is, she is, they are\r\n    },\r\n};\r\n/**\r\n * Upon clicking restart, player character will use these default values.\r\n */\r\nexport let defaultPlayer = {\r\n    id: 0,\r\n    playerName: \"\",\r\n    pronouns: {\r\n        Category: \"\",\r\n        subjectPro: \"\",\r\n        objectPro: \"\",\r\n        possAdj: \"\",\r\n        possessivePro: \"\",\r\n        reflex: \"\",\r\n        is: \"\", //he is, she is, they are\r\n    },\r\n};\r\n","import { player } from \"./playerInfo\";\r\n/** List of pronouns. Add, edit or remove accordingly to author's needs.\r\n * To change structure i.e adding more field like title: \"Mr\"... refer to src/model/player.ts\r\n */\r\nexport const pronouns = [\r\n    {\r\n        Category: \"He/Him\",\r\n        subjectPro: \"he\",\r\n        objectPro: \"him\",\r\n        possAdj: \"his\",\r\n        possessivePro: \"his\",\r\n        reflex: \"himself\",\r\n        is: \"he is\",\r\n    },\r\n    {\r\n        Category: \"She/Her\",\r\n        subjectPro: \"she\",\r\n        objectPro: \"her\",\r\n        possAdj: \"her\",\r\n        possessivePro: \"hers\",\r\n        reflex: \"herself\",\r\n        is: \"she is\",\r\n    },\r\n    {\r\n        Category: \"They/Them\",\r\n        subjectPro: \"they\",\r\n        objectPro: \"them\",\r\n        possAdj: \"their\",\r\n        possessivePro: \"theirs\",\r\n        reflex: \"themselves\",\r\n        is: \"they are\",\r\n    }\r\n];\r\n/**\r\n * Show radio group with pronouns option for players to choose from.\r\n * Append radio buttons to HTML element with id = \"pronouns\".\r\n */\r\nexport function showPronounDialogue() {\r\n    let pronounsContainer = document.getElementById(\"pronouns\");\r\n    if (pronounsContainer) {\r\n        let pronounsLength = pronouns.length;\r\n        for (var i = 0; i < pronounsLength; i++) {\r\n            let pronounEntry = `\r\n            <input type=\"radio\" id=\"${pronouns[i].subjectPro}\" name=\"pronouns\" value=\"${pronouns[i].Category}\">\r\n            <label for=\"${pronouns[i].subjectPro}\">${pronouns[i].Category}</label><br>`;\r\n            pronounsContainer.innerHTML += pronounEntry;\r\n        }\r\n        pronounsContainer.addEventListener('click', getPronouns);\r\n    }\r\n}\r\n/**\r\n * Get Pronouns value from clicked radio button\r\n */\r\nexport function getPronouns() {\r\n    var selectedPronoun = document.querySelector('input[name=\"pronouns\"]:checked')?.value;\r\n    var found = pronouns.find(element => element.Category == selectedPronoun);\r\n    if (found) {\r\n        setPronouns(found);\r\n    }\r\n    ;\r\n    console.log(selectedPronoun);\r\n    console.log(player);\r\n}\r\n/**\r\n * Save player's selected pronoun\r\n * @param pronouns\r\n */\r\nexport function setPronouns(pronouns) {\r\n    player.pronouns = pronouns;\r\n    showPronouns(pronouns);\r\n}\r\nexport function loadPronounsRadioBtn(pronouns) {\r\n    let savedPronouns = document.getElementById(`${pronouns.subjectPro}`);\r\n    savedPronouns.checked = true;\r\n}\r\n/**\r\n * Show player's pronouns on all element with class = \"playerPronouns\"\r\n */\r\nexport function showPronouns(pronouns) {\r\n    let pronounsClassed = document.querySelectorAll(\".playerPronouns\");\r\n    if (pronounsClassed) {\r\n        pronounsClassed.forEach(element => element.innerHTML = `${pronouns.Category}`);\r\n    }\r\n}\r\n","import { defaultPlayer } from \"../../game/playerInfo\";\r\nimport { showPronouns } from \"./pronouns\";\r\nexport const player = {\r\n    id: 0,\r\n    playerName: \"\",\r\n    pronouns: {\r\n        Category: \"\",\r\n        subjectPro: \"\",\r\n        objectPro: \"\",\r\n        possAdj: \"\",\r\n        possessivePro: \"\",\r\n        reflex: \"\",\r\n        is: \"\", //he is, she is, they are\r\n    },\r\n};\r\nexport function getPlayer() {\r\n    return player;\r\n}\r\nexport function getDefaultPlayer() {\r\n    return defaultPlayer;\r\n}\r\n/**\r\n * Get pronouns set by the player.\r\n * @returns player's pronouns\r\n */\r\nexport function getPlayerPronouns() {\r\n    return getPlayer().pronouns;\r\n}\r\nexport function setPlayer(newPlayer) {\r\n    player.id = newPlayer.id;\r\n    player.playerName = newPlayer.playerName;\r\n    player.pronouns = newPlayer.pronouns;\r\n}\r\nexport function setName(inputName) {\r\n    player.playerName = inputName;\r\n}\r\n/**\r\n * Get player's name from HTML input element id = 'playerName'\r\n */\r\nexport function getName() {\r\n    var playerName = document.getElementById(\"playerName\").value;\r\n    console.log(`Player Name is: ${playerName}`);\r\n    setName(playerName);\r\n    showNameDiv(playerName);\r\n    console.log(player);\r\n}\r\n/**\r\n * Show player's name in a any element where class = \"yourName\"\r\n * @param playerName\r\n */\r\nexport function showNameDiv(playerName) {\r\n    const container = document.querySelectorAll(\".yourName\");\r\n    if (container) {\r\n        container.forEach(element => {\r\n            element.innerHTML = `${playerName} `;\r\n        });\r\n    }\r\n}\r\n/**Reset player information to initial value. */\r\nexport function resetPlayer() {\r\n    setPlayer(getDefaultPlayer());\r\n    showNameDiv(defaultPlayer.playerName);\r\n    showPronouns(defaultPlayer.pronouns);\r\n}\r\n",";\r\nexport var conStyle;\r\n(function (conStyle) {\r\n    conStyle[conStyle[\"show\"] = 0] = \"show\";\r\n    conStyle[conStyle[\"hidden\"] = 1] = \"hidden\";\r\n    conStyle[conStyle[\"hideReason\"] = 2] = \"hideReason\";\r\n})(conStyle || (conStyle = {}));\r\n;\r\n//TODO: implement show/hide/hideReason on Precondition. \r\n//Currently, precondition shows reason why a choice cannot be clicked by default \r\n// const precondition: Precondition = {\r\n//     stat: [{\r\n//         statName: \"intellect\",\r\n//         value: 1\r\n//     }],\r\n//     item: [{\r\n//         itemName: \"key\",\r\n//         itemQty: 1,\r\n//         itemCode: \"key\"\r\n//     }]\r\n// }\r\nexport class singleParagraph {\r\n    constructor(p) {\r\n        this.paragraph = p;\r\n    }\r\n}\r\n","//stat can be used in precondition\r\nexport class Stat {\r\n    constructor(s, v) {\r\n        this.statName = s;\r\n        this.value = v;\r\n    }\r\n}\r\nexport var statStyle;\r\n(function (statStyle) {\r\n    statStyle[statStyle[\"hide\"] = 0] = \"hide\";\r\n    statStyle[statStyle[\"show\"] = 1] = \"show\";\r\n})(statStyle || (statStyle = {}));\r\n/**\r\n * Extends Stat, but has style.\r\n * Style property show or hide the Stat from view.\r\n */\r\nexport class statWithStyle extends Stat {\r\n    constructor(s, v, style) {\r\n        super(s, v);\r\n        this.style = style;\r\n    }\r\n}\r\n//stat style: hidden, default: show.\r\n//hidden stat use case: stat and value that author does not want to show player\r\n//like a variable that dictate which ending the player will receive (bad/good ending counter)\r\n","import { getPlayerPronouns } from \"../core/player/playerInfo\";\r\n/////////////////////////////Formatting tools////////////////////////////////////////\r\n/**\r\n *Capitalise the first letter in a string.\r\n */\r\nexport function capitalise(word) {\r\n    if (!word)\r\n        return word;\r\n    return word[0].toUpperCase() + word.substr(1).toLowerCase();\r\n}\r\n////////////////////////////////////////////////////////////////////////////////////\r\n/**Grey out text */\r\nexport function greyOut(thing) {\r\n    thing.style.color = \"#6A6C6E\";\r\n}\r\n////////////////////////Grammar tools//////////////////////////////////////////\r\n/**\r\n * Specify the verb form that goes with a set of pronouns.\r\n * Ex: (have) She has a pen / They have a pen\r\n * @param form verb form that goes with 'she/he'\r\n * @param original base verb, usually goes with 'they/you/we'\r\n * @returns form or original, depends on the player's selected pronouns.\r\n */\r\nexport function verbForm(form, original) {\r\n    let pronoun = getPlayerPronouns();\r\n    if (pronoun.subjectPro == \"they\") {\r\n        return original;\r\n    }\r\n    else\r\n        return form;\r\n}\r\nexport function showOnCondition(type, requiredElement, value, message, failedMessage) {\r\n    switch (type) {\r\n        case (type = 'stat'):\r\n            //a = check in player's stat\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n        case (type = 'item'):\r\n            //a = check in player's inventory\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n        case (type = 'quest'):\r\n            //a = check in player's quest log\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n        case (type = 'variable'):\r\n            //a = check in player's variables\r\n            //if a = checkResult.passed\r\n            return requiredElement;\r\n    }\r\n}\r\nshowOnCondition('stat', `athletic`, 12, `You could try to pry it open with your crowbar`, `There's nothing else you can do here<br>`);\r\n","import { capitalise, verbForm } from \"../tools/formatting\";\r\nimport { statStyle } from \"../core/model/Stat\";\r\nimport catImg from \"../../assets/images/cat.jpg\";\r\nexport function getParagraph(player) {\r\n    let paragraphs = [\r\n        {\r\n            name: \"start\",\r\n            content: `This is the first paragraph. <u><b>Welcome to a game!<\\/b><\\/u> This game is a multi choice Interactive fiction. Different choices will lead to different outcomes. Rejoice! Enjoy your time playing here!`,\r\n            choices: [\r\n                { id: 1, content: \"Alright then, lead me to the next paragraph\", nextName: \"wood\" },\r\n            ],\r\n        },\r\n        {\r\n            name: \"wood\",\r\n            content: `You are walking into the woods and there's no one around.\r\n        Or so you thought. Your senses tells you that there's something out there, but your conscious mind tries to convince otherwise.\r\n        After all, there's no reason for anyone to be out at this hour.\r\n        <br>Or is it?<br>\r\n        No time for pleasantries, but at the very least, could you tell us a bit about yourself?<br>\r\n        <input id=\"playerName\" type=\"text\" placeholder=\"Enter your name here!\" aria-label=\"playerName\" value=\"${player?.playerName}\">\r\n        <div id=\"pronouns\">And your pronouns? <br></div>\r\n        `,\r\n            choices: [\r\n                { id: 1, content: \"Ooooh! Next!!!!!\", nextName: `greeting` },\r\n                { id: 2, content: `I'm scared. Let's go back to the first one!`, nextName: `start` }\r\n            ],\r\n            item: [\r\n                {\r\n                    itemName: 'sword',\r\n                    itemQty: 1,\r\n                    description: \"An old, rusty sword you found on the ground.\",\r\n                    itemCode: \"sword\",\r\n                },\r\n                {\r\n                    itemName: 'great sword',\r\n                    itemQty: 1,\r\n                    description: \"An old, rusty great sword you found on the ground.\",\r\n                    itemCode: \"great_sword\",\r\n                },\r\n                {\r\n                    itemName: 'very small sword',\r\n                    itemQty: 1,\r\n                    description: \"A small small sword\",\r\n                    itemCode: \"smol_sword\",\r\n                    precondition: {\r\n                        stat: [{ statName: 'Meow', value: 1 }],\r\n                        item: [{ itemName: \"candied nut\", itemQty: 1, itemCode: \"nut1\", }]\r\n                    }\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"greeting\",\r\n            content: `This is the third paragraph. A guy and his friend, Snail Guy waved at you and said: \"This is ${player?.playerName}! ${capitalise(player?.pronouns.is)} finally here! ${capitalise(player?.pronouns.subjectPro) + \" \" + verbForm('was', 'were')} busy last time you were here, so I couldn't introduce ${player?.pronouns.objectPro} to you. Oh well, this is the end. Bye ${player?.playerName}!\"<br>`,\r\n            choices: [\r\n                { id: 1, content: \"And you continue walking\", nextName: \"key on ground\" },\r\n            ],\r\n            // item: [\r\n            //   { itemName: 'flowers', itemQty: 3, description: `Some nice, wild flowers`, itemCode: `wild_flowers` }\r\n            // ],\r\n        },\r\n        {\r\n            // id: 3,\r\n            name: \"key on ground\",\r\n            content: `<p>You found a box on the ground. There's a key inside of the box. Along with some flowers on the ground.</p><p>Just a heads-up. The next paragraph uses update style \"append\".</p>`,\r\n            choices: [\r\n                {\r\n                    id: 1, content: \"Move along\", style: \"append\", nextName: \"surprise\"\r\n                    // precondition: {\r\n                    //   stat: [{ statName: 'Meow', value: 2 }],\r\n                    // }\r\n                }\r\n            ],\r\n            item: [\r\n                { itemName: 'key', itemQty: 1, description: \"A small key. You wonder what it's for.\", itemCode: \"key1\", },\r\n                { itemName: 'flowers', itemQty: 6, description: `Some nice, wild flowers`, itemCode: `wild_flowers` }\r\n            ],\r\n        },\r\n        {\r\n            name: \"surprise\",\r\n            content: `<p style=\"color: purple\">There's a bear behind you! AAAAAAAAAAAAAAAAAAAAA!</p>\r\n        <p>\r\n        You run to the magic space-time door, which is something that you know will lead you back to the beginning of the game.\r\n        </p>\r\n        <p>There's a key hole on the door. The door has an image of a goddess holding 6 flowers. Maybe if you use the key and hold 6 flowers, you might get past this door.</p>`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: \"[Use Key] [Hold the flowers] Let's go back from the beginning\",\r\n                    nextName: \"start\",\r\n                    precondition: {\r\n                        item: [\r\n                            { itemName: \"key\", itemQty: 1, itemCode: \"key1\", },\r\n                            { itemName: 'flowers', itemQty: 6, itemCode: `wild_flowers` }\r\n                        ],\r\n                    },\r\n                    consequence: {\r\n                        item: [{ itemName: \"key\", description: \"A small key. You wonder what it's for.\", itemQty: -1, itemCode: \"key1\", }],\r\n                        stat: [\r\n                            { statName: 'Meow', value: 1, style: statStyle.show },\r\n                            { statName: `hiddenValue`, value: 1, style: statStyle.hide }\r\n                        ],\r\n                    },\r\n                },\r\n                {\r\n                    id: 2,\r\n                    content: \"Or should you just run? Here, take these if you want to go on (1x key, 1x candied nut)\",\r\n                    nextName: \"oh? you're still here?\",\r\n                    consequence: {\r\n                        item: [\r\n                            { itemName: \"key\", description: \"A small key. You wonder what it's for.\", itemQty: 1, itemCode: \"key1\", },\r\n                            { itemName: \"candied nut\", description: \"A sweet, sweet treat\", itemQty: 1, itemCode: \"nut1\", },\r\n                        ],\r\n                    },\r\n                },\r\n                // {\r\n                //   id: 3, \r\n                //   content: `Hmmm`, \r\n                //   nextName: \"cave ahead\"\r\n                // },\r\n            ],\r\n        },\r\n        {\r\n            name: \"oh? you're still here?\",\r\n            content: `<img src=\"${catImg}\">\r\n        <p>Nice attempt, but there's no more content past this point.</p>\r\n        <p>Enjoyed the game? Didn't enjoy it? Well, there's a reason why I am not a literature major :)</p>`,\r\n            choices: [\r\n                {\r\n                    id: 1, content: \"This is truly the end. There's nothing else. Let's just go back\",\r\n                    nextName: \"start\",\r\n                    consequence: {\r\n                        stat: [{ statName: 'Growl', value: 1, style: statStyle.show }],\r\n                    }\r\n                },\r\n                { id: 2, content: \"Trust me on this one my friend.\", nextName: \"start\" },\r\n                {\r\n                    id: 3, content: \"This choice is just here to show what it's like if your Stats check had failed.\",\r\n                    nextName: \"edge\",\r\n                    precondition: {\r\n                        item: [\r\n                            { itemName: \"key\", itemQty: 1, itemCode: \"key1\", },\r\n                        ],\r\n                        stat: [\r\n                            { statName: `Athletic`, value: 10 },\r\n                        ],\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"edge\",\r\n            content: `You leaped across the ledge! And landed successfully. You are safe, for now.`,\r\n            choices: [\r\n                {\r\n                    id: 1, content: `Weeee!`, nextName: \"start\"\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"cave ahead\",\r\n            content: `You walked south from where you started. You saw a cave`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `Enter Cave`,\r\n                    nextName: \"enter cave\",\r\n                },\r\n                {\r\n                    id: 2,\r\n                    content: `Turn back to where you started`,\r\n                    nextName: \"edge\"\r\n                },\r\n                {\r\n                    id: 3,\r\n                    content: `Stop and think for a moment`,\r\n                    nextName: \"start\"\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            name: \"enter cave\",\r\n            content: `You enter the cave. It's dark, pitch-black in here`,\r\n            choices: [\r\n                {\r\n                    id: 1,\r\n                    content: `Try to adjust your eyes`,\r\n                    nextName: \"start\",\r\n                    precondition: {\r\n                        item: [{\r\n                                itemName: `sword`,\r\n                                itemQty: 1,\r\n                                itemCode: `sword`,\r\n                            },\r\n                        ],\r\n                        stat: [],\r\n                    },\r\n                },\r\n                {\r\n                    id: 2,\r\n                    content: `Turn back to the cave entrance`,\r\n                    nextName: \"cave ahead\"\r\n                },\r\n            ],\r\n        },\r\n    ];\r\n    return paragraphs;\r\n}\r\n","//each itemCode must be unique\r\n//Don't use special characters in itemCode. There will be consequences (bug).\r\n/**\r\n * When player pick up and Item and put it into their inventory,\r\n * It'll turn into InventoryItem, which saves the item's info and\r\n * where it was picked up (its location - paragraph id)\r\n */\r\nexport class inventoryItem {\r\n    constructor(i, p) {\r\n        // pickedUpLocation: Array<Paragraphs[\"id\"]> = [];\r\n        this.pickedUpLocation = [];\r\n        this.item = i;\r\n        this.pickedUpLocation.push(p);\r\n    }\r\n}\r\n// type itemCondition = Omit<Items, 'description'>\r\n//NOTE for authors: Please refrain from  changing Paragraph's name as this would affect\r\n//pickedUpLocation and other paragraph's dependency\r\n","import { inventoryItem } from \"../model/item\";\r\nimport { capitalise } from \"../../tools/formatting\";\r\nexport let inventory = [];\r\nfunction addToInventory(item) {\r\n    inventory.push(item);\r\n}\r\n/**\r\n * Transfer items form an array of items to the inventory one by one.\r\n * Use case: load inventory from save file && add a bulk of item from treasure chest to inventory\r\n * @param items Array of itemss\r\n */\r\nexport function loadBulkInventory(items) {\r\n    items.forEach(element => addToInventory(element));\r\n}\r\nexport function getInventory() {\r\n    return inventory;\r\n}\r\nexport function clearInventory() {\r\n    inventory.length = 0;\r\n    return inventory;\r\n}\r\nexport function getItem(item, pName) {\r\n    const inInventory = inventory.find(element => element.item.itemCode == item.itemCode);\r\n    if (!inInventory) {\r\n        let newItem = new inventoryItem(item, pName);\r\n        console.log(`${item.itemName} has been added to inventory`);\r\n        addToInventory(newItem);\r\n        console.log(inventory);\r\n        appendItemHTML(item);\r\n    }\r\n    else if (inInventory && inInventory.item.itemQty == 0) {\r\n        inInventory.item.itemQty += item.itemQty;\r\n        console.log(`${item.itemName} is already in the inventory. Adding 1 to quantity.`);\r\n        console.log(inventory);\r\n        appendItemHTML(inInventory.item);\r\n    }\r\n    else {\r\n        inInventory.item.itemQty += item.itemQty;\r\n        //when itemQty = 0, remove it from view.\r\n        if (inInventory.item.itemQty == 0) {\r\n            removeItemHTML(inInventory.item.itemCode);\r\n        }\r\n        else {\r\n            console.log(`${item.itemName} is already in the inventory. Adding 1 to quantity.`);\r\n            console.log(inventory);\r\n            //update item quantity on view\r\n            let quantityDiv = document.querySelector(`#${item.itemCode}-quantity`);\r\n            quantityDiv.textContent = `Quantity: ${inInventory.item.itemQty}`;\r\n            let pNameCheck = inInventory.pickedUpLocation.find(location => location == pName);\r\n            console.log(pNameCheck, pName);\r\n            if (!pNameCheck) {\r\n                inInventory.pickedUpLocation.push(pName);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**Remove a certain number of item in inventory.\r\n * When it reaches 0, remove item from view, but still keep it in inventory array.\r\n */\r\nexport function deleteItem(item, quantity) {\r\n    let toBeDeleted = getInventory().find(element => element.item.itemName == item.itemName && element.item.itemCode == item.itemCode);\r\n    toBeDeleted.item.itemQty -= quantity;\r\n    if (toBeDeleted.item.itemQty == 0) {\r\n        removeItemHTML(item.itemCode);\r\n    }\r\n}\r\n/**\r\n * Remove item from view.\r\n */\r\nexport function removeItemHTML(itemCode) {\r\n    let itemHTML = document.querySelector(`#pills-${itemCode}-tab`);\r\n    let itemDescriptionHTML = document.querySelector(`#pills-${itemCode}`);\r\n    itemHTML.remove();\r\n    itemDescriptionHTML.remove();\r\n}\r\n/**\r\n * After picking up an item, the item's name and description will be viewable on Inventory's UI\r\n * @param item\r\n */\r\nexport function appendItemHTML(item) {\r\n    let inventoryTab = document.querySelector(\"#inventory-tab\"); //(Bootstrap's tab pills)\r\n    let inventoryTabContent = document.querySelector(\"#inventory-tabContent\"); //(Bootstrap's tab-pane)\r\n    let tab = `<li class=\"nav-item\" role=\"presentation\">\r\n        <a class=\"nav-link\" \r\n        id=\"pills-${item.itemCode}-tab\" \r\n        data-bs-toggle=\"pill\" \r\n        href=\"#pills-${item.itemCode}\" \r\n        role=\"tab\" \r\n        aria-controls=\"pills-${item.itemCode}\" aria-selected=\"false\">${capitalise(item.itemName)}</a>\r\n        </li>`;\r\n    inventoryTab.innerHTML += tab;\r\n    let tabContent = `<div class=\"tab-pane fade\" \r\n    id=\"pills-${item.itemCode}\" \r\n    role=\"tabpanel\" \r\n    aria-labelledby=\"pills-${item.itemCode}-tab\">\r\n    ${item.description}\r\n    <div id=\"${item.itemCode}-quantity\">Quantity: ${item.itemQty}</div>\r\n    </div>`;\r\n    inventoryTabContent.innerHTML += tabContent;\r\n}\r\n/**\r\n * Clear all item from Inventory interface\r\n */\r\nexport function clearInventoryHTML() {\r\n    let inventoryTab = document.querySelector(\"#inventory-tab\");\r\n    let inventoryTabContent = document.querySelector(\"#inventory-tabContent\");\r\n    inventoryTab.textContent = '';\r\n    inventoryTabContent.textContent = '';\r\n}\r\n","import { statStyle, statWithStyle } from \"../model/Stat\";\r\n//Place the initial value of your player's Stat here, if you want to.\r\nexport let playerStat = [\r\n    { statName: \"Intellect\", value: 10, style: statStyle.show },\r\n    { statName: \"Endurance\", value: 4, style: statStyle.show },\r\n    { statName: 'Athletic', value: 0, style: statStyle.show }\r\n];\r\nexport function restoreDefaultStat() {\r\n    let defaultPlayerStat = [\r\n        { statName: \"Intellect\", value: 10, style: statStyle.show },\r\n        { statName: \"Endurance\", value: 4, style: statStyle.show },\r\n        { statName: 'Athletic', value: 0, style: statStyle.show }\r\n    ];\r\n    loadStat(defaultPlayerStat);\r\n}\r\nexport function getStat() {\r\n    return playerStat;\r\n}\r\n/**\r\n * Add new Stat to playerStat\r\n * @param statName\r\n * @param value\r\n */\r\nexport function addNewStat(statName, value, style) {\r\n    let newStat = new statWithStyle(statName, value, style);\r\n    getStat().push(newStat);\r\n}\r\n/** Add or subtract point from a stat\r\n * Note that the stat must exist before trying to modify it.\r\n*/\r\nexport function modifyStatValue(stat, value) {\r\n    let _stat = getStat().find(element => element.statName == stat.statName);\r\n    _stat.value += value;\r\n}\r\n/** Load Stats from an Array */\r\nexport function loadStat(stat) {\r\n    stat.forEach(element => addNewStat(element.statName, element.value, element.style));\r\n}\r\nexport function clearAllStat() {\r\n    getStat().length = 0;\r\n    return playerStat;\r\n}\r\nexport function deleteStat(statName) {\r\n    getStat().find(element => element.statName == statName);\r\n}\r\n//if stat already exist, add modify value, if not in playerStat, add to it.\r\nexport function handleStats(stat) {\r\n    let found = playerStat.find(element => element.statName == stat.statName);\r\n    if (found) {\r\n        console.log(`it is found`);\r\n        modifyStatValue(found, stat.value);\r\n        switch (stat.style) {\r\n            case (stat.style = statStyle.hide):\r\n                // do nothing :)\r\n                break;\r\n            default:\r\n                updateStatHTML(found);\r\n                break;\r\n        }\r\n        console.log(`Handled! modified ${found.value}`);\r\n    }\r\n    if (!found) {\r\n        addNewStat(stat.statName, stat.value, stat.style);\r\n        switch (stat.style) {\r\n            case (stat.style = statStyle.hide):\r\n                // do nothing :)\r\n                break;\r\n            default:\r\n                appendStatHTML(stat);\r\n                break;\r\n        }\r\n        console.log(`not found, so added new stat`);\r\n    }\r\n}\r\nexport function appendStatHTML(stat) {\r\n    let statContainer = document.querySelectorAll(`.stat`);\r\n    statContainer.forEach(element => {\r\n        element.innerHTML += `<div id='stat-${stat.statName}'>${stat.statName}: ${stat.value}</div>`;\r\n    });\r\n    // statContainer!.innerHTML += `<div id='stat-${stat.statName}'>${stat.statName}: ${stat.value}</div>`;\r\n}\r\nexport function clearStatHTML() {\r\n    let statContainer = document.querySelector(`.stat`);\r\n    statContainer.textContent = ``;\r\n}\r\n/** Show all Stat on the UI.\r\n * Use case: run when load game.\r\n */\r\nexport function showAllStatHTML(stat) {\r\n    stat.forEach(element => {\r\n        switch (element.style) {\r\n            case (element.style = statStyle.show):\r\n                appendStatHTML(element);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\nexport function updateStatHTML(stat) {\r\n    let statHTML = document.querySelector(`#stat-${stat.statName}`);\r\n    statHTML.innerHTML = `<div id='stat-${stat.statName}'>${stat.statName}: ${stat.value}</div>`;\r\n}\r\n//TODO: updateStatHTML: separate statName, stat value into two different HTML elements, preferably a table\r\n","import { getItem } from \"../inventory/inventory\";\r\nimport { getCurrentParagraphName } from \"../paragraphs/paragraphFunctions\";\r\nimport { handleStats } from \"../player/statInfos\";\r\n//Consequence: After a choice, player gain/loose item or stat point, or both.\r\nexport function applyConsequence(consequence) {\r\n    let item = consequence.item;\r\n    let stat = consequence.stat;\r\n    if (item) {\r\n        item.forEach(item => {\r\n            getItem(item, getCurrentParagraphName());\r\n        });\r\n    }\r\n    if (stat) {\r\n        stat.forEach(stat => {\r\n            handleStats(stat);\r\n        });\r\n    }\r\n}\r\n","import { getInventory } from \"../inventory/inventory\";\r\nimport { getStat } from \"../player/statInfos\";\r\nimport { checkResult } from \"./choiceCondition\";\r\n/**\r\n * Check if player's stat satisfy precondition\r\n * @param elementId HTML element's id\r\n * @param statName required stat's name\r\n * @param value required value\r\n * @returns enum checkResult passed or failed.\r\n */\r\nexport function checkStat(elementId, statName, value) {\r\n    var found = getStat().find(element => element.statName == statName);\r\n    let elementHTML = document.querySelector(`#${elementId}`);\r\n    if (found) {\r\n        if (found.value < value) {\r\n            console.log(`Condition not met! ${found.value} < ${value}`);\r\n            //show reason why it's failed\r\n            elementHTML.innerHTML += ` [Condition not met: ${statName} value ${found.value}/${value}]`;\r\n            return checkResult.failed;\r\n        }\r\n        if (found.value >= value) {\r\n            console.log(\"Condition met. Proceed.\");\r\n            //let the player click on the choice\r\n            return checkResult.passed;\r\n        }\r\n    }\r\n    else {\r\n        console.log(\"Condition not met!\");\r\n        elementHTML.innerHTML += ` [Condition not met: player does not have ${statName}]`;\r\n        return checkResult.failed;\r\n    }\r\n}\r\n;\r\n/**\r\n * Check if required item is in player's inventory\r\n * @param choiceId\r\n * @param itemCode\r\n * @param itemName\r\n * @param itemQty\r\n * @returns checkResult passed or failed\r\n */\r\nexport function checkInInventory(elementId, itemCode, itemQty, itemName) {\r\n    const inInventory = getInventory().find(element => element.item.itemCode == itemCode);\r\n    let elementHTML = document.querySelector(elementId);\r\n    if (!inInventory) {\r\n        elementHTML.innerHTML += ` [Condition not met: ${itemName} cannot be found in inventory]`;\r\n        return checkResult.failed;\r\n    }\r\n    else if (inInventory && inInventory.item.itemQty < itemQty) {\r\n        elementHTML.innerHTML += ` [Condition not met: ${itemName} quantity ${inInventory.item.itemQty}/${itemQty}]`;\r\n        return checkResult.failed;\r\n    }\r\n    else {\r\n        console.log(`Condition: ${itemName} found in inventory! Proceed`);\r\n        //let the player click on the choice\r\n        return checkResult.passed;\r\n    }\r\n}\r\n","//Check if player's stat meet the need to proceed.\r\n//For example, the choice \"Climb the tree [Athletic 10]\" needs Athletic = 10\r\nimport { greyOut } from \"../../tools/formatting\";\r\nimport { checkInInventory, checkStat } from \"./checkConditions\";\r\n//before this, check if choice has precondition.\r\n//if there's no condition on a choice, skip this function entirely.\r\n/**\r\n * Check all precondition of a single choice.\r\n * @param choice\r\n * @param condition\r\n */\r\nexport function checkChoiceCondition(choice, condition) {\r\n    let item = condition.item;\r\n    let stat = condition.stat;\r\n    let a, b;\r\n    if (item) {\r\n        item.forEach(item => {\r\n            let temp = checkInInventory(`#cid${choice.id}`, item.itemCode, item.itemQty, item.itemName);\r\n            if (temp == checkResult.failed) {\r\n                a = temp;\r\n            }\r\n        });\r\n    }\r\n    if (stat) {\r\n        stat.forEach(stat => {\r\n            let temp = checkStat(`cid${choice.id}`, stat.statName, stat.value);\r\n            if (temp == checkResult.failed) {\r\n                b = temp;\r\n            }\r\n        });\r\n    }\r\n    if (a == checkResult.failed || b == checkResult.failed) {\r\n        let choiceHTML = document.querySelector(`#cid${choice.id}`);\r\n        greyOut(choiceHTML);\r\n        choiceHTML.classList.add(\"choice-blocked\");\r\n        console.log(`${choice.id} is blocked`);\r\n    }\r\n}\r\n/**Show/hide/ */\r\n// function handleConditionHTML(choiceId: Choices['id'], message: string, style: conStyle | undefined) {\r\n//     switch (style) {\r\n//         case (0): //show    \r\n//             let choiceHTML = document.querySelector(`#cid${choiceId}`);\r\n//             // greyOut((<HTMLElement>choiceHTML));\r\n//             choiceHTML!.innerHTML += message;\r\n//             // choiceHTML!.classList.add(\"choice-blocked\");\r\n//             break;\r\n//         case (1): //hidden - hide the entire choice\r\n//             choiceHTML = document.querySelector(`#cid${choiceId}`);\r\n//             choiceHTML!.innerHTML = ``\r\n//             break;\r\n//         case (2): //hide reason\r\n//             // choiceHTML = document.querySelector(`#cid${choiceId}`);\r\n//             // greyOut((<HTMLElement>choiceHTML));\r\n//             // choiceHTML!.classList.add(\"choice-blocked\");\r\n//             break;\r\n//         default: //do nothing, leave it alone.\r\n//             break;\r\n//     }\r\n// }\r\nexport var checkResult;\r\n(function (checkResult) {\r\n    checkResult[checkResult[\"passed\"] = 0] = \"passed\";\r\n    checkResult[checkResult[\"failed\"] = 1] = \"failed\";\r\n    // notFound = 2,\r\n    // insufficientQuantity = 3,\r\n})(checkResult || (checkResult = {}));\r\n","export class Save {\r\n    constructor(p, i, pname, s) {\r\n        this.player = p;\r\n        this.inventory = i;\r\n        this.currentParagraphName = pname;\r\n        this.stat = s;\r\n        this.date = new Date().toLocaleString();\r\n    }\r\n}\r\n// let save1 = new Save(getPlayer(), inventory, getParagraph.id)\r\n// new save -> stringify save -> push into local storage\r\n// load: get from local storage or save string -> json parse -> put data back\r\n","import { appendItemHTML, clearInventory, clearInventoryHTML, getInventory, loadBulkInventory } from \"../inventory/inventory\";\r\nimport { clearAllStat, clearStatHTML, getStat, loadStat, showAllStatHTML } from \"../player/statInfos\";\r\nimport { Save } from \"../model/save\";\r\nimport { getCurrentParagraphName, updateParagraph } from \"../paragraphs/paragraphFunctions\";\r\nimport { getPlayer, setPlayer, showNameDiv } from \"../player/playerInfo\";\r\nimport { loadPronounsRadioBtn, showPronouns } from \"../player/pronouns\";\r\n/**\r\n * Create a new save and stringify it.\r\n */\r\nfunction save() {\r\n    let save = new Save(getPlayer(), getInventory(), getCurrentParagraphName(), getStat());\r\n    let stringSave = JSON.stringify(save);\r\n    return stringSave;\r\n}\r\nfunction load(retrievedSave) {\r\n    clearInventory();\r\n    clearInventoryHTML();\r\n    setPlayer(retrievedSave.player);\r\n    loadBulkInventory(retrievedSave.inventory);\r\n    clearAllStat();\r\n    clearStatHTML();\r\n    loadStat(retrievedSave.stat);\r\n    showAllStatHTML(retrievedSave.stat);\r\n    updateParagraph(retrievedSave.currentParagraphName, retrievedSave.player);\r\n    retrievedSave.inventory.forEach((element) => {\r\n        if (element.item.itemQty > 0) {\r\n            appendItemHTML(element.item);\r\n        }\r\n    });\r\n    showNameDiv(retrievedSave.player.playerName);\r\n    showPronouns(retrievedSave.player.pronouns);\r\n    let savedPronouns = document.getElementById(`${retrievedSave.player.pronouns.subjectPro}`);\r\n    if (savedPronouns) {\r\n        loadPronounsRadioBtn(retrievedSave.player.pronouns);\r\n    }\r\n}\r\n// TODO: user should be able to toggle auto-save on/off\r\nexport function autoSave() {\r\n    localStorage.setItem('autoSave', save());\r\n}\r\nexport function autoLoad() {\r\n    let retrievedSave = JSON.parse(localStorage.getItem('autoSave'));\r\n    if (retrievedSave) {\r\n        load(retrievedSave);\r\n    }\r\n}\r\n/**\r\n * Save the game's state to LocalStorage\r\n * @param saveSlot string that would later used as LocalStorage key.\r\n */\r\nexport function newSave(saveSlot) {\r\n    //check if LocalStorage is supported on client's browser\r\n    if (typeof (Storage) !== \"undefined\") {\r\n        console.log(`LocalStorage is supported! Saved file to ${saveSlot}`);\r\n        localStorage.setItem(saveSlot, save());\r\n        getSaveDesc(saveSlot);\r\n    }\r\n    else {\r\n        console.log(\"LocalStorage is not supported in this browser! Please export the save code instead.\");\r\n    }\r\n}\r\n//TODO: Make a proper LocalStorage is not supported message that shows on page, not just in console.\r\nexport function loadSave(saveSlot) {\r\n    if (typeof (Storage) !== \"undefined\") {\r\n        console.log(\"LocalStorage is supported!\");\r\n        let retrievedSave = JSON.parse(localStorage.getItem(saveSlot));\r\n        load(retrievedSave);\r\n    }\r\n    else {\r\n        console.log(\"LocalStorage is not supported in this browser! Please export the save code instead.\");\r\n    }\r\n}\r\nexport function exportStorageSave(saveSlot) {\r\n    let retrievedSave = localStorage.getItem(saveSlot);\r\n    let saveMessage = document.querySelector('#exportMessage');\r\n    saveMessage.textContent = null; //clear old message\r\n    saveMessage.innerHTML += `Save exported from ${saveSlot}.<br> \r\n    Copy and keep the code bellow to load later`;\r\n    let saveOutput = document.querySelector(`#saveOutput`);\r\n    saveOutput.value = ``; //clear old save\r\n    saveOutput.value = `${btoa(retrievedSave)}`; //encode to Base64\r\n    saveOutput.select();\r\n}\r\n/**\r\n * Generate a random-looking string that save the game's progress.\r\n * The string is encoded to Base64 to prevent players (to an extent) from altering their save.\r\n */\r\nexport function exportSave() {\r\n    let saveMessage = document.querySelector('#exportMessage');\r\n    saveMessage.textContent = null; //clear old message\r\n    saveMessage.innerHTML += `Save created at ${new Date().toLocaleString()}.<br> \r\n    Copy and keep the code bellow to load later`;\r\n    let saveOutput = document.querySelector(`#saveOutput`);\r\n    saveOutput.value = ``; //clear old save\r\n    saveOutput.value += `${btoa(save())}`; //encode to Base64\r\n    saveOutput.select();\r\n}\r\n/**\r\n * Get Save Code from textarea id = \"saveOutput\"\r\n * Decode the encoded save string and load game.\r\n */\r\nexport function loadSaveCode() {\r\n    let loadCode = document.querySelector(\"#saveOutput\").value;\r\n    loadCode = atob(loadCode);\r\n    console.log(loadCode);\r\n    let retrievedSave = JSON.parse(loadCode);\r\n    console.log(retrievedSave);\r\n    load(retrievedSave);\r\n    let loadMessage = document.querySelector(`#exportMessage`);\r\n    loadMessage.innerHTML += `<div class=\"alert alert-warning alert-dismissible fade show mt-1\" role=\"alert\">\r\n        <strong> Load Success! </strong> Loaded save from ${retrievedSave.date}.\r\n            <button type = \"button\" class=\"btn-close\" data - bs - dismiss=\"alert\" aria - label=\"Close\"> </button>\r\n                </div>`;\r\n    //TODO: verify if save is valid. \r\n    //TODO: fallback: If load is invalid, start new game.\r\n}\r\nexport function getSaveDesc(saveSlot) {\r\n    let retrievedSave = JSON.parse(localStorage.getItem(saveSlot));\r\n    let description = retrievedSave.date;\r\n    let descContainer = document.querySelector(`#saveDesc-${saveSlot}`);\r\n    descContainer.innerHTML = description;\r\n}\r\n","import { greyOut } from \"../../tools/formatting\";\r\nimport { checkInInventory, checkStat } from \"./checkConditions\";\r\nimport { checkResult } from \"./choiceCondition\";\r\nexport function checkItemCondition(item, condition) {\r\n    let preItem = condition.item;\r\n    let stat = condition.stat;\r\n    let a, b;\r\n    if (preItem) {\r\n        preItem.forEach(requiredItem => {\r\n            let temp = checkInInventory(`#${item.itemCode}`, requiredItem.itemCode, requiredItem.itemQty, requiredItem.itemName);\r\n            if (temp == checkResult.failed) {\r\n                a = temp;\r\n            }\r\n        });\r\n    }\r\n    if (stat) {\r\n        stat.forEach(stat => {\r\n            let temp = checkStat(item.itemCode, stat.statName, stat.value);\r\n            if (temp == checkResult.failed) {\r\n                b = temp;\r\n            }\r\n        });\r\n    }\r\n    if (a == checkResult.failed || b == checkResult.failed) {\r\n        let itemHTML = document.querySelector(`#${item.itemCode}`);\r\n        greyOut(itemHTML);\r\n        itemHTML.classList.add(\"item-blocked\");\r\n        console.log(`${item.itemCode} is blocked`);\r\n    }\r\n}\r\n// function appendInventoryReason(elementId: string, itemName: string, reqQty: number, actualQty: number, result: checkResult) {\r\n//     let elementHTML = document.querySelector(`#${elementId}`);\r\n//     switch (result) {\r\n//         case (result = checkResult.notFound):\r\n//             elementHTML!.innerHTML += ` [Condition not met: ${itemName} cannot be found in inventory]`;\r\n//             break;\r\n//         case (result = checkResult.insufficientQuantity):\r\n//             elementHTML!.innerHTML += ` [Condition not met: ${itemName} quantity ${actualQty}/${reqQty}]`;\r\n//             break;\r\n//     }\r\n// }\r\n","import { singleParagraph } from \"../model/paragraph\";\r\nimport { getName, getPlayer } from \"../player/playerInfo\";\r\nimport { showPronounDialogue } from \"../player/pronouns\";\r\nimport { getParagraph } from \"../../game/allParagraphs\";\r\nimport { showChoices } from \"./showChoices\";\r\nimport { showItems } from \"./showItems\";\r\nlet currentParagraph;\r\n/**Get nextName, then show the paragraph with that name.\r\n  * @param {number} nextName next paragraph's name.\r\n  * @param {string} style optional. Update paragraph style. Leave blank for default: clear previous paragraph then show the next one.\r\n*/\r\nexport function updateParagraph(nextName, style) {\r\n    let player = getPlayer();\r\n    let pName = getParagraph(player).findIndex(element => element.name == nextName);\r\n    // console.log(pName, nextName);\r\n    // console.log(getParagraph(player)[pName])\r\n    let p = new singleParagraph(getParagraph(player)[pName]);\r\n    let nextParagraph = p.paragraph;\r\n    // let nextParagraph = getParagraph(player)[nextid];\r\n    const choiceContainer = document.getElementById(\"choices\");\r\n    const itemContainer = document.getElementById(\"items\");\r\n    let choices = nextParagraph.choices;\r\n    let items = null;\r\n    itemContainer.innerHTML = null;\r\n    setCurrentParagraphName(nextName);\r\n    switch (style) {\r\n        case \"append\":\r\n            currentParagraph = currentParagraph + \" \" + nextParagraph.content;\r\n            paragraphContainerContent(currentParagraph);\r\n            break;\r\n        default:\r\n            paragraphContainerContent(null);\r\n            currentParagraph = nextParagraph.content;\r\n            paragraphContainerContent(currentParagraph);\r\n            break;\r\n    }\r\n    choiceContainer.textContent = null;\r\n    showChoices(choices, choiceContainer);\r\n    items = nextParagraph.item;\r\n    if (items) {\r\n        showItems(items, itemContainer, nextName);\r\n    }\r\n    if (document.getElementById(\"pronouns\")) {\r\n        showPronounDialogue();\r\n        if (player.pronouns.Category != \"\") {\r\n            let selectedPronoun = document.getElementById(player.pronouns.subjectPro);\r\n            selectedPronoun.checked = true;\r\n        }\r\n    }\r\n    if (document.querySelector(\"input#playerName\")) {\r\n        document.addEventListener(\"keyup\", function (e) {\r\n            // e.target was the clicked element\r\n            if (e.target && e.target.matches(\"input#playerName\")) {\r\n                getName();\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set the content of HTML element id = 'paragraph'\r\n * @param content : string or null to clear all content\r\n */\r\nfunction paragraphContainerContent(content) {\r\n    const paragraphContainer = document.getElementById(\"paragraph\");\r\n    paragraphContainer.innerHTML = content;\r\n}\r\nexport function choiceContainerContent(content) {\r\n    const choiceContainer = document.getElementById(\"choices\");\r\n    choiceContainer.innerHTML += content;\r\n}\r\nlet currentName = \"start\";\r\nfunction setCurrentParagraphName(name) {\r\n    currentName = name;\r\n}\r\nexport function getCurrentParagraphName() {\r\n    return currentName;\r\n}\r\n","import { applyConsequence } from \"../conditions/consequences\";\r\nimport { checkChoiceCondition } from \"../conditions/choiceCondition\";\r\nimport { autoSave } from \"../script/saveScript\";\r\nimport { updateParagraph } from \"./paragraphFunctions\";\r\n/**\r\n * Show available choices in a paragraph\r\n * @param choices should takes the value of allParagraphs[nextid].choices\r\n * @param choiceContainer document.getElementById(\"choices\");\r\n */\r\nexport function showChoices(choices, choiceContainer) {\r\n    if (choices) {\r\n        for (let i = 0; i < choices.length; i++) {\r\n            let currentChoice = choices[i];\r\n            let choice = `<a href=\"#\" \r\n            class=\"choices\" id=\"cid${currentChoice.id}\" >\r\n            ${currentChoice.content} \r\n            </a><br>`;\r\n            choiceContainer.innerHTML += choice;\r\n            if (currentChoice.precondition) {\r\n                console.log(`choice n.${currentChoice.id} has condition!`);\r\n                checkChoiceCondition(currentChoice, currentChoice.precondition);\r\n            }\r\n            else {\r\n                // console.log(`choice n.${currentChoice.id} has no condition`);\r\n            }\r\n            //if(currentChoice.quest){\r\n            //\r\n            //}\r\n        }\r\n        for (let i = 0; i < choices.length; i++) {\r\n            let currentChoice = choices[i];\r\n            let nextName = currentChoice.nextName;\r\n            let style = choices[i].style;\r\n            let choiceHTML = choiceContainer.querySelector(`#cid${currentChoice.id}`);\r\n            //if element doesn't have class choice-blocked, add event listener, else, don't do anything\r\n            if (!choiceHTML.classList.contains(\"choice-blocked\")) {\r\n                choiceHTML.addEventListener('click', function () {\r\n                    if (currentChoice.consequence) {\r\n                        applyConsequence(currentChoice.consequence);\r\n                    }\r\n                    removeChoices();\r\n                    updateParagraph(nextName, style);\r\n                    autoSave();\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction removeChoices() {\r\n    let choiceContainer = document.querySelector('#choices');\r\n    removeAllChildNodes(choiceContainer);\r\n}\r\nfunction removeAllChildNodes(parent) {\r\n    while (parent.firstChild) {\r\n        parent.removeChild(parent.firstChild);\r\n    }\r\n}\r\n","import { getInventory, getItem } from \"../inventory/inventory\";\r\nimport { autoSave } from \"../script/saveScript\";\r\nimport { checkItemCondition } from \"../conditions/itemCondition\";\r\nimport { getCurrentParagraphName } from \"./paragraphFunctions\";\r\nexport function showItems(items, itemContainer, pname) {\r\n    //these are kinda ugly but oh my god did it run :( Probably should refactor some other time\r\n    for (var i = 0; i < items.length; i++) {\r\n        let currentItem = items[i];\r\n        let found = getInventory().find(element => element.item.itemName == currentItem.itemName && element.item.itemCode == currentItem.itemCode);\r\n        if (found) { //item name is in inventory\r\n            //Check if item had been found at this location\r\n            console.log(pname);\r\n            let pNameCheck = found.pickedUpLocation.includes(`${pname}`);\r\n            console.log(pNameCheck);\r\n            if (pNameCheck) {\r\n                let message = `<a href=\"#\" class=\"items picked\" id=\"${currentItem.itemCode}\">[Added to Inventory] You've already picked up ${currentItem.itemName}</a><br>`;\r\n                console.log(`${currentItem.itemName} is already picked up at this location (${pname})`);\r\n                itemContainer.innerHTML += message;\r\n            }\r\n            else { //not found at this location\r\n                let item = `<a href=\"#\" class=\"items item-new-location\" id=\"${currentItem.itemCode}\">You found ×${currentItem.itemQty} ${currentItem.itemName}</a><br>`;\r\n                itemContainer.innerHTML += item;\r\n                if (currentItem.precondition) {\r\n                    checkItemCondition(currentItem, currentItem.precondition);\r\n                }\r\n            }\r\n        }\r\n        else { //entirely new item name, entirely new location\r\n            let item = `<a href=\"#\" class=\"items\" id=\"${currentItem.itemCode}\">You found ×${currentItem.itemQty} ${currentItem.itemName}</a><br>`;\r\n            itemContainer.innerHTML += item;\r\n            if (currentItem.precondition) {\r\n                checkItemCondition(currentItem, currentItem.precondition);\r\n            }\r\n        }\r\n    }\r\n    //add Event listener\r\n    for (var i = 0; i < items.length; i++) {\r\n        let currentItem = items[i];\r\n        let itemHTML = itemContainer.querySelector(`#${currentItem.itemCode}`);\r\n        let pickedUp = itemHTML.classList.contains(`picked`);\r\n        let newLocation = itemHTML.classList.contains(`item-new-location`);\r\n        //if item has class item-new-location, push new location and add to quantity\r\n        let itemBlocked = itemHTML?.classList.contains(\"item-blocked\");\r\n        if (newLocation) {\r\n            itemHTML.addEventListener(\"click\", function () {\r\n                getItem(currentItem, getCurrentParagraphName());\r\n                let message = `[Added to Inventory] You picked up ${currentItem.itemName}`;\r\n                itemHTML.innerHTML = message;\r\n                itemHTML.style.color = \"#6A6C6E\";\r\n                autoSave();\r\n            }, { once: true });\r\n        }\r\n        else if (itemBlocked) {\r\n            //do nothing :) \r\n        }\r\n        else if (pickedUp) {\r\n            itemHTML.style.color = \"#6A6C6E\";\r\n        }\r\n        else { //entirely new item name, entirely new location\r\n            itemHTML.addEventListener(\"click\", function () {\r\n                getItem(currentItem, getCurrentParagraphName());\r\n                console.log(currentItem.itemName);\r\n                let message = `[Added to Inventory] You picked up ${currentItem.itemName}`;\r\n                itemHTML.innerHTML = message;\r\n                itemHTML.style.color = \"#6A6C6E\";\r\n                autoSave();\r\n            }, { once: true });\r\n        }\r\n    }\r\n}\r\n","import { clearInventory, clearInventoryHTML } from \"../inventory/inventory\";\r\nimport { conStyle } from \"../model/paragraph\";\r\nimport { updateParagraph } from \"../paragraphs/paragraphFunctions\";\r\nimport { resetPlayer } from \"../player/playerInfo\";\r\nimport { clearAllStat, clearStatHTML, getStat, restoreDefaultStat, showAllStatHTML } from \"../player/statInfos\";\r\nimport { autoSave } from \"./saveScript\";\r\nexport function restartGame() {\r\n    updateParagraph(\"start\");\r\n    clearInventory();\r\n    resetPlayer();\r\n    clearInventoryHTML();\r\n    clearAllStat();\r\n    clearStatHTML();\r\n    restoreDefaultStat();\r\n    showAllStatHTML(getStat());\r\n    autoSave();\r\n}\r\n;\r\n/**\r\n * Toggle the appearance of reason on choices\r\n * 3 cases: show both the choice and the condition\r\n * hide choice if condition is not met\r\n * hide the reason\r\n */\r\nexport function toggleReason(style) {\r\n    switch (style) {\r\n        case (style = conStyle.hidden):\r\n            //hide reason and choice\r\n            break;\r\n        case (style = conStyle.hideReason):\r\n            //hide reason only\r\n            break;\r\n        case (style = conStyle.show):\r\n            //show choice and reason\r\n            break;\r\n    }\r\n}\r\n/**\r\n * Increase font size\r\n */\r\nexport function setFontSize(size) {\r\n}\r\nlet gameInfo = {\r\n    gameVersion: `0.0.1`,\r\n    IFID: ``,\r\n    name: `Demo`,\r\n    description: ``,\r\n    author: `Author Name`,\r\n    engineVersion: `0.0.0.1`,\r\n    engine: ``\r\n};\r\n","import { getName } from \"../player/playerInfo\";\r\nimport { showPronounDialogue } from \"../player/pronouns\";\r\nimport { updateParagraph } from \"../paragraphs/paragraphFunctions\";\r\nimport { autoLoad, exportSave, exportStorageSave, getSaveDesc, loadSave, loadSaveCode, newSave } from \"./saveScript\";\r\nimport { restartGame } from \"./settings\";\r\nimport { getStat, showAllStatHTML } from \"../player/statInfos\";\r\n///////////////////Initialize game///////////////////\r\nwindow.onload = function () {\r\n    //check if autoSave exits?\r\n    let autoSave = localStorage.getItem('autoSave');\r\n    if (autoSave) {\r\n        autoLoad();\r\n    }\r\n    else {\r\n        updateParagraph(\"start\");\r\n        showAllStatHTML(getStat());\r\n    }\r\n};\r\n// Add event listener to HTML element input with id = \"playerName\"\r\nconst nameInput = document.querySelector(\"#playerName\");\r\nif (nameInput) {\r\n    nameInput.addEventListener('keyup', getName);\r\n}\r\n;\r\n////////////////////button!!!!!!!!!!!!/////////////\r\nconst button = document.querySelector(\"#coolbutton\");\r\nfunction doThing(thing) {\r\n    console.log(\"thing!\");\r\n}\r\nif (button) {\r\n    button.addEventListener('click', doThing);\r\n}\r\n///////////////////////////////////////////////////\r\nshowPronounDialogue();\r\n// Add event listener to all Save buttons\r\nconst saveButton = document.querySelectorAll(\".save\");\r\nsaveButton.forEach(element => {\r\n    let slotNumber = element.getAttribute(\"value\");\r\n    element.addEventListener('click', function () {\r\n        newSave(slotNumber);\r\n    });\r\n});\r\n// Add event listener to all Load buttons\r\nconst loadButton = document.querySelectorAll(\".load\");\r\nloadButton.forEach(element => {\r\n    let slotNumber = element.getAttribute(\"value\");\r\n    element.addEventListener('click', function () {\r\n        loadSave(slotNumber);\r\n    });\r\n});\r\n// Add event listener to all Load buttons\r\nconst exportLocalSaveBtn = document.querySelectorAll(\".export\");\r\nexportLocalSaveBtn.forEach(element => {\r\n    let slotNumber = element.getAttribute(\"value\");\r\n    element.addEventListener('click', function () {\r\n        exportStorageSave(slotNumber);\r\n    });\r\n});\r\n// Add event listener to export save button\r\nconst exportSaveBtn = document.querySelector(\".exportSave\");\r\nexportSaveBtn?.addEventListener('click', function () {\r\n    exportSave();\r\n});\r\n// Add event listener to import save button\r\nconst importSaveBtn = document.querySelector(\".importSave\");\r\nimportSaveBtn?.addEventListener(`click`, function () {\r\n    loadSaveCode();\r\n});\r\n// Add event listener to restart game button\r\nconst restartBtn = document.querySelector(\".restartBtn\");\r\nrestartBtn?.addEventListener('click', function () { restartGame(); });\r\n// Load save Description, from slot 1 to 3\r\nfor (let i = 1; i < 4; i++) {\r\n    if (localStorage.getItem(`slot-${i}`)) {\r\n        getSaveDesc(`slot-${i}`);\r\n    }\r\n}\r\n"],"sourceRoot":""}